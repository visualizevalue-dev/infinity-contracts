{
  "address": "0x12b7f0E2F3D562b0Cd012bd58E2D620bFdFE542f",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "attributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "band",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "elements",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "gradient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "grid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "on",
          "type": "bool"
        }
      ],
      "name": "light",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "symbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "traitType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "traitValue",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "append",
          "type": "string"
        }
      ],
      "name": "trait",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfb07a22239ef274b12cc68cb4362cf95ffdbb616ca453ba9aeb33fcf7254437",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xC9979381750d5325378CBE36177E7aB037D87CE1",
    "contractAddress": null,
    "transactionIndex": 63,
    "gasUsed": "1481497",
    "logsBloom": "0x
    "blockHash": "0xb6359f7588d7474f824b1ee57961baecdd6b47d7cbbce50ef735d90085d2c80d",
    "transactionHash": "0xcfb07a22239ef274b12cc68cb4362cf95ffdbb616ca453ba9aeb33fcf7254437",
    "logs": [],
    "blockNumber": 9479699,
    "cumulativeGasUsed": "12350788",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c3f378ba41e05b92972639af2d777060",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"band\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"elements\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"gradient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"grid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"on\",\"type\":\"bool\"}],\"name\":\"light\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"traitValue\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"append\",\"type\":\"string\"}],\"name\":\"trait\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"VisualizeValue\",\"kind\":\"dev\",\"methods\":{\"attributes(Token)\":{\"details\":\"Render the JSON atributes for a given Infinity token.\",\"params\":{\"data\":\"The check to render.\"}},\"band(Token)\":{\"details\":\"Get the value for the 'Band' attribute.\"},\"elements(Token)\":{\"details\":\"Get the value for the 'Elements' attribute.\"},\"gradient(Token)\":{\"details\":\"Get the value for the 'Gradient' attribute.\"},\"grid(Token)\":{\"details\":\"Get the value for the 'Grid' attribute.\"},\"light(bool)\":{\"details\":\"Get the value for the 'Light' attribute.\"},\"symbols(Token)\":{\"details\":\"Get the value for the 'Symbols' attribute.\"},\"tokenURI(Token)\":{\"details\":\"Render the JSON Metadata for a given Infinity token.\",\"params\":{\"data\":\"The render data for our token\"}},\"trait(string,string,string)\":{\"details\":\"Generate the SVG snipped for a single attribute.\",\"params\":{\"append\":\"Helper to append a comma.\",\"traitType\":\"The `trait_type` for this trait.\",\"traitValue\":\"The `value` for this trait.\"}}},\"title\":\"InfiniteMetadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Renders ERC1155 compatible metadata for Infinity tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/InfiniteMetadata.sol\":\"InfiniteMetadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteArt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./InfiniteBags.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n@title  InfiniteArt\\n@author VisualizeValue\\n@notice Renders the Infinity visuals.\\n*/\\nlibrary InfiniteArt {\\n\\n    /// @dev Generate the SVG code for an Infinity token.\\n    function renderSVG(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<svg viewBox=\\\"0 0 800 800\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                renderStyle(data),\\n                renderDefs(),\\n                '<rect width=\\\"800\\\" height=\\\"800\\\" fill=\\\"var(--bg)\\\" />',\\n                '<g transform=\\\"scale(0.95)\\\" transform-origin=\\\"center\\\">',\\n                    renderGrid(),\\n                '</g>',\\n                renderNoise(data),\\n                '<g transform=\\\"scale(0.95)\\\" transform-origin=\\\"center\\\">',\\n                    renderSymbols(data),\\n                '</g>',\\n            '</svg>'\\n        );\\n    }\\n\\n    /// @dev Render CSS variables.\\n    function renderStyle(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<style>',\\n                ':root {',\\n                    '--bg: ', data.background, ';',\\n                    '--gr: ', data.gridColor, ';',\\n                '}',\\n            '</style>'\\n        );\\n    }\\n\\n    /// @dev Render SVG meta defenitions.\\n    function renderDefs() public pure returns (string memory) {\\n        return string.concat(\\n            '<defs>',\\n                '<rect id=\\\"box\\\" width=\\\"100\\\" height=\\\"100\\\" stroke=\\\"var(--gr)\\\" stroke-width=\\\"3\\\" style=\\\"paint-order: stroke;\\\" />'\\n                '<g id=\\\"row\\\">', renderGridRow(), '</g>',\\n                '<mask id=\\\"mask\\\"><rect width=\\\"800\\\" height=\\\"800\\\" fill=\\\"white\\\"/></mask>',\\n                '<path id=\\\"loop\\\" d=\\\"M 100 0 A 100 100, 0, 1, 1, 0 100 L 0 0 Z\\\"/>',\\n                '<g id=\\\"infinity\\\">',\\n                    '<use href=\\\"#loop\\\" />',\\n                    '<use href=\\\"#loop\\\" transform=\\\"scale(-1,-1)\\\" />',\\n                '</g>',\\n                '<filter id=\\\"noise\\\">',\\n                    '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.8\\\" stitchTiles=\\\"stitch\\\" numOctaves=\\\"1\\\" seed=\\\"8\\\"/>',\\n                    '<feColorMatrix type=\\\"saturate\\\" values=\\\"0\\\"/>',\\n                '</filter>',\\n            '</defs>'\\n        );\\n    }\\n\\n    /// @dev Generate the SVG code for the entire 8x8 grid.\\n    function renderGrid() public pure returns (string memory) {\\n        string memory grid;\\n        for (uint256 i; i < 8; i++) {\\n            grid = string.concat(\\n                grid,\\n                '<use href=\\\"#row\\\" transform=\\\"translate(0,', str(i*100), ')\\\" />'\\n            );\\n        }\\n\\n        return grid;\\n    }\\n\\n    /// @dev Generate the SVG code for rows in the 8x8 grid.\\n    function renderGridRow() public pure returns (string memory) {\\n        string memory row;\\n        for (uint256 i; i < 8; i++) {\\n            row = string.concat(\\n                row,\\n                '<use transform=\\\"translate(', str(i*100), ')\\\" href=\\\"#box\\\" />'\\n            );\\n        }\\n        return row;\\n    }\\n\\n    /// @dev Render the noise layer.\\n    function renderNoise(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<rect mask=\\\"url(#mask)\\\" width=\\\"800\\\" height=\\\"800\\\" fill=\\\"black\\\" filter=\\\"url(#noise)\\\" ',\\n                'style=\\\"mix-blend-mode: multiply;\\\" opacity=\\\"', data.light ? '0.248\\\"' : '0.8\\\"',\\n            '/>'\\n        );\\n    }\\n\\n    /// @dev Generate SVG code for the symbols.\\n    function renderSymbols(Token memory data) public pure returns (string memory) {\\n        uint space  = 800 / data.grid;\\n        uint center = space / 4;\\n        uint width  = space / 2;\\n\\n        string memory symbols;\\n        for (uint i = 0; i < data.count; i++) {\\n            Symbol memory symbol = data.symbols[i];\\n\\n            uint baseStroke = symbol.isInfinity ? 8 : 4;\\n            uint stroke = (data.grid < 8 ? baseStroke : baseStroke * 3 / 4) * data.grid / 2;\\n            uint scale  = width * 1000 / symbol.formWidth;\\n\\n            symbol.x      = str(i % data.grid * space + center);\\n            symbol.y      = str(i / data.grid * space + center);\\n            symbol.stroke = str(stroke);\\n            symbol.center = str(center);\\n            symbol.width  = str(width);\\n            symbol.scale  = scale < 1000\\n                ? string.concat('0.', str(scale))\\n                : str(scale / 1000);\\n\\n            symbols = string.concat(symbols, renderSymbol(symbol));\\n        }\\n        return symbols;\\n    }\\n\\n    /// @dev Generate SVG code for the symbols.\\n    function renderSymbol(Symbol memory symbol) public pure returns (string memory) {\\n        symbol.color.rendered = renderColor(symbol.color);\\n\\n        string memory rendered = symbol.form == 1 ? renderLoop(symbol)\\n                               : symbol.form == 2 ? renderInfinitySingle(symbol)\\n                               : symbol.form == 3 ? render90Loop(symbol)\\n                               : symbol.form == 4 ? renderInfinityPair(symbol)\\n                               : symbol.form == 5 ? render180Loop(symbol)\\n                               : symbol.form == 8 ? renderInfinityCheck(symbol)\\n                                                  : render360Loop(symbol);\\n\\n        return string.concat(\\n            '<g transform=\\\"translate(',symbol.x,',',symbol.y,') rotate(',symbol.rotation,')\\\" ',\\n                'transform-origin=\\\"',symbol.center,' ',symbol.center,'\\\" ',\\n                'stroke-width=\\\"', symbol.stroke,\\n            '\\\">',\\n                rendered,\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Helper to render a color to its SVG compliant HSL string.\\n    function renderColor(Color memory color) public pure returns (string memory) {\\n        if (bytes(color.rendered).length > 0) return color.rendered;\\n\\n        return string.concat('hsl(', str(color.h), ' ', str(color.s), '% ', str(color.l), '%)');\\n    }\\n\\n    /// @dev Render a single loop symbol.\\n    function renderLoop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<use href=\\\"#loop\\\" transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\" />'\\n        );\\n    }\\n\\n    /// @dev Render two loop symbols, one rotated by 90 degrees.\\n    function render90Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,0) scale(-1,1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render two loop symbols, one rotated by 180 degrees.\\n    function render180Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,200) scale(-1,-1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render four loop symbols to form a square.\\n    function render360Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,0) scale(-1,1)\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(0,200) scale(1,-1)\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,200) scale(-1,-1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Check: Render a single infinity.\\n    function renderInfinitySingle(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Double check: Render an infinity pair.\\n    function renderInfinityPair(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(90)\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Quadruple check: Render an infinity check.\\n    function renderInfinityCheck(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(45)\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(90)\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(135)\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Uint to string helper.\\n    function str(uint n) public pure returns (string memory) {\\n        return Utilities.uint2str(n);\\n    }\\n}\\n\",\"keccak256\":\"0xeb2476fdd33255d1e8358a153be0be4492ee1b26e04a324d7237f0d32484cd0b\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteBags.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n@title  InfiniteBags\\n@author VisualizeValue\\n@notice Bags to hold infinity token data. Imo pretty funny...\\n*/\\n\\n/// @dev Bag holding computed token data.\\nstruct Token {\\n    uint seed;\\n    string background;\\n    string gridColor;\\n    uint8 alloy;\\n    uint8 grid;\\n    uint8 count;\\n    uint8 band;\\n    uint8 gradient;\\n    bool continuous;\\n    bool mapColors;\\n    bool light;\\n    Symbol[64] symbols;\\n}\\n\\n/// @dev Bag holding computed symbol data.\\nstruct Symbol {\\n    uint form;\\n    uint16 formWidth;\\n    bool isInfinity;\\n    string rotation;\\n    string stroke;\\n    string center;\\n    string scale;\\n    string width;\\n    string x;\\n    string y;\\n    uint colorIdx;\\n    Color color;\\n}\\n\\n/// @dev Bag holding color data.\\nstruct Color {\\n    uint16 h;\\n    uint16 s;\\n    uint16 l;\\n    string rendered;\\n}\\n\",\"keccak256\":\"0x9851c0b999d3fcda7c07d9ec496c1902ff46a2334ec29fe50c37b1ffbb0b72c1\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./InfiniteBags.sol\\\";\\nimport \\\"./InfiniteArt.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n@title  InfiniteMetadata\\n@author VisualizeValue\\n@notice Renders ERC1155 compatible metadata for Infinity tokens.\\n*/\\nlibrary InfiniteMetadata {\\n\\n    /// @dev Render the JSON Metadata for a given Infinity token.\\n    /// @param data The render data for our token\\n    function tokenURI(\\n        Token memory data\\n    ) public pure returns (string memory) {\\n        bytes memory metadata = abi.encodePacked(\\n            '{',\\n                '\\\"name\\\": \\\"Infinity\\\",',\\n                unicode'\\\"description\\\": \\\"\\u221e\\\",',\\n                '\\\"image\\\": ',\\n                    '\\\"data:image/svg+xml;base64,',\\n                    Base64.encode(abi.encodePacked(InfiniteArt.renderSVG(data))),\\n                    '\\\",',\\n                '\\\"attributes\\\": [', attributes(data), ']',\\n            '}'\\n        );\\n\\n        return string.concat(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(metadata)\\n        );\\n    }\\n\\n    /// @dev Render the JSON atributes for a given Infinity token.\\n    /// @param data The check to render.\\n    function attributes(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            trait('Light', light(data.light), ','),\\n            trait('Grid', grid(data), ','),\\n            data.light  ? '' : trait('Elements',  elements(data), ','),\\n            data.light  ? '' : trait('Gradient',  gradient(data), ','),\\n            data.light  ? '' : trait('Band',      band(data), ','),\\n            trait('Symbols',   symbols(data), '')\\n        );\\n    }\\n\\n    /// @dev Get the value for the 'Light' attribute.\\n    function light(bool on) public pure returns (string memory) {\\n        return on ? 'On' : 'Off';\\n    }\\n\\n    /// @dev Get the value for the 'Grid' attribute.\\n    function grid(Token memory data) public pure returns (string memory) {\\n        string memory g = Utilities.uint2str(data.grid);\\n\\n        return string.concat(g, 'x', g);\\n    }\\n\\n    /// @dev Get the value for the 'Elements' attribute.\\n    function elements(Token memory data) public pure returns (string memory) {\\n        return data.alloy == 0 ? 'Isolate'\\n             : data.alloy == 1 ? 'Composite'\\n             : data.alloy == 2 ? 'Compound'\\n                               : 'Complete';\\n    }\\n\\n    /// @dev Get the value for the 'Band' attribute.\\n    function band(Token memory data) public pure returns (string memory) {\\n        return (data.continuous || data.alloy < 2) ? 'Continuous' : 'Cut';\\n    }\\n\\n    /// @dev Get the value for the 'Gradient' attribute.\\n    function gradient(Token memory data) public pure returns (string memory) {\\n        return [\\n            // [0, 1, 2, 3, 4, 5, _, 7, 8, 9, 10, _, _, _, _, _, 16]\\n            'None', 'Linear', 'Double Linear', 'Angled Down', 'Ordered', 'Angled Up', '', 'Angled Down', 'Linear Z',\\n            'Angled', 'Angled Up', '', '', '', '', '', 'Double Linear Z'\\n        ][data.gradient];\\n    }\\n\\n    /// @dev Get the value for the 'Symbols' attribute.\\n    function symbols(Token memory data) public pure returns (string memory) {\\n        return data.mapColors ? 'Mapped' : 'Random';\\n    }\\n\\n    /// @dev Generate the SVG snipped for a single attribute.\\n    /// @param traitType The `trait_type` for this trait.\\n    /// @param traitValue The `value` for this trait.\\n    /// @param append Helper to append a comma.\\n    function trait(\\n        string memory traitType, string memory traitValue, string memory append\\n    ) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"trait_type\\\": \\\"', traitType, '\\\",'\\n                '\\\"value\\\": \\\"', traitValue, '\\\"'\\n            '}',\\n            append\\n        ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5972b314475fa902079c0214e01a099e390bf725f273cc7e0a855ba172ae9b13\",\"license\":\"MIT\"},\"contracts/libraries/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Utilities {\\n    /// @dev Zero-index based pseudorandom number based on one input and max bound\\n    function random(uint256 input, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input))) % _max);\\n    }\\n\\n    /// @dev Zero-index based salted pseudorandom number based on two inputs and max bound\\n    function random(uint256 input, string memory salt, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input, salt))) % _max);\\n    }\\n\\n    /// @dev Convert an integer to a string\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @dev Get the smallest non zero number\\n    function minGt0(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two\\n            ? two > 0\\n                ? two\\n                : one\\n            : one;\\n    }\\n\\n    /// @dev Get the smaller number\\n    function min(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one < two ? one : two;\\n    }\\n\\n    /// @dev Get the larger number\\n    function max(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two ? one : two;\\n    }\\n\\n    /// @dev Get the average between two numbers\\n    function avg(uint8 one, uint8 two) public pure returns (uint8 result) {\\n        unchecked {\\n            result = (one >> 1) + (two >> 1) + (one & two & 1);\\n        }\\n    }\\n\\n    /// @dev Get the days since another date (input is seconds)\\n    function day(uint256 from, uint256 to) public pure returns (uint24) {\\n        return uint24((to - from) / 24 hours + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x529f3946295d83e9961a487a953572220c07f1ab38c53619a5342a3bca957b42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100aa575f3560e01c8063a7f98aca1161007d578063da61e2aa11610063578063da61e2aa14610136578063df0e9d0114610149578063f8e7ab261461015c575f80fd5b8063a7f98aca14610110578063b11303a714610123575f80fd5b8063455a6a69146100ae5780634afd561b146100d757806392800719146100ea578063962f363b146100fd575b5f80fd5b6100c16100bc366004611047565b61016f565b6040516100ce91906111dc565b60405180910390f35b6100c16100e5366004611047565b610235565b6100c16100f8366004611047565b61031b565b6100c161010b3660046111f5565b6105ff565b6100c161011e366004611047565b61062e565b6100c1610131366004611047565b6106b2565b6100c1610144366004611277565b6107c8565b6100c1610157366004611047565b610843565b6100c161016a366004611047565b6108d5565b60808101516040517ff76f950e00000000000000000000000000000000000000000000000000000000815260ff90911660048201526060905f9073__$bd654521c54dee0917bb5ce7a9c0751ede$__9063f76f950e906024015f60405180830381865af41580156101e2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102099190810190611290565b9050808160405160200161021e929190611302565b604051602081830303815290604052915050919050565b60605f6102d773__$cb217de49c6b27d61ef57f519dafde212f$",
  "libraries": {
    "Utilities": "0x9a4DCF3Fd4174F8F170F9b31eAf16001529ae613",
    "InfiniteArt": "0xC6B17CAFcc2439ef4833fe6a073bA71438112f87"
  },
  "devdoc": {
    "author": "VisualizeValue",
    "kind": "dev",
    "methods": {
      "attributes(Token)": {
        "details": "Render the JSON atributes for a given Infinity token.",
        "params": {
          "data": "The check to render."
        }
      },
      "band(Token)": {
        "details": "Get the value for the 'Band' attribute."
      },
      "elements(Token)": {
        "details": "Get the value for the 'Elements' attribute."
      },
      "gradient(Token)": {
        "details": "Get the value for the 'Gradient' attribute."
      },
      "grid(Token)": {
        "details": "Get the value for the 'Grid' attribute."
      },
      "light(bool)": {
        "details": "Get the value for the 'Light' attribute."
      },
      "symbols(Token)": {
        "details": "Get the value for the 'Symbols' attribute."
      },
      "tokenURI(Token)": {
        "details": "Render the JSON Metadata for a given Infinity token.",
        "params": {
          "data": "The render data for our token"
        }
      },
      "trait(string,string,string)": {
        "details": "Generate the SVG snipped for a single attribute.",
        "params": {
          "append": "Helper to append a comma.",
          "traitType": "The `trait_type` for this trait.",
          "traitValue": "The `value` for this trait."
        }
      }
    },
    "title": "InfiniteMetadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Renders ERC1155 compatible metadata for Infinity tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
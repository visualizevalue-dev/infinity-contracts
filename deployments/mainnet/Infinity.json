{
  "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "genesisRecipients",
          "type": "address[]"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDesposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Message",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "degenerate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "degenerateMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "generate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "generateExisting",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "generateMany",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "generateManyExisting",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "regenerate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "degenerateAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "regenerateMany",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "svg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xc8f8e2F59Dd95fF67c3d39109ecA2e2A017D4c8a",
    "contractAddress": null,
    "transactionIndex": 56,
    "gasUsed": "4886395",
    "logsBloom": "0x00080200400000ac22040220e40801100030000020000400810014000e08006880240000401000418040200002086100080802220000004a2000000000032020040000002000000001000002a0002020016140880000020020000000400030000200020442442007294300000000980018802004008004024080c001600200010181000002420408804090000108211401000000c0100000010180800401800823000400040100000201c001040002041000004800214040108010420801280120000084020100900400884441200140010000600848002902240090030021810080008208830040006800000002000090010008001009012480080002004000",
    "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978",
    "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044a3ccddccae339d05200a8f4347f83a58847e52"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 147,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c31328e68ba9770d4c3375fd2b7c79c9904c711f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 148,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3c7ea560b5533da8eee31212a9595a419e6d631"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 149,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000097b439db483bb0e02c709b2e948a32ee72daa82d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 150,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b3b5102aee1557135449ec0d514f2b7334769af2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 151,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000184a973a0ed40b7c4ee187b844bd1455f2191a1d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 152,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007637dcb54a019a027175964ad845763d3fc3b5cd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 153,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000078b05cc4f278662416083dfe211f7496abc38518"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 154,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069e68074f1aada957edd39c5eae0069973343f30"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 155,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b5fe817488d86f55ab1a4e40598a3cfbde95b6a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 156,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001a1427a73b7cb0f4ea3f71c6c8090c4366c8ebe1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 157,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002177da04f9479496c2292d6344d306aa49beb34a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 158,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f0d6999725115e3ead3d927eb3329d63afaec09b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 159,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e11da9560b51f8918295edc5ab9c0a90e9ada20b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 160,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000047d0cb513a2ccb1ed44d4af271410a9c8d5248f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 161,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000012c29df62b1b254e1311bef777a37bf8c575b58d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 162,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000016a2ebd556af2a39eba349be7d6eba7a57c47711"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 163,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001da5331994e781ab0e2af9f85bfce2037a514170"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 164,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001f8615a2caa4c8ab08bf1312e022341022c90e37"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 165,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000243db4aaa62b3785df27c364090749b96e45f3ec"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 166,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000324111baf9886e0456d74cef0ecbd49ed0779ee1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 167,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000343e73d33639d9c354fa215ca23ffcd0f5604ac1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 168,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000367dc97068ab54ba1dfbfc0fad12fbcb7b3a0d09"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 169,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c1bee74ff0d159ab06b6113417fc536499057c6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 170,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000461a5b8326ba0e2dfd133651a3b559dc8d3b0400"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 171,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f55fd3b7ec169a364e34eb7f523ca5ceb12c888"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 172,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000051787a2c56d710c68140bdadefd3a98bff96feb4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 173,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000059590178e9eddb027ed87bed9c1da8cd5129fed9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 174,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005efdb6d8c798c2c2bea5b1961982a5944f92a5c1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 175,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f45c7ea2e094fea813a8a8813620ffcc4a19d0f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 176,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000626ffae9f5537d4fadb6065585213f095b106bfc"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 177,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000065a4c69f4ea3fea89a0d4156c3d91c787472b670"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 178,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000067164d8853d3dc9ab5d11cb6744e6f04401cf772"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 179,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000679d5162bad71990abca0f18095948c12a2756b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 180,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072915ad3110eb31768a562f540ac1ebcd51d3dc8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 181,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000075432062a9bcc6bc5c294f44a8e3aa65bec8a64d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 182,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007a3cf7122eb2e3f3820f0afaaac4206cdc50bd7e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 183,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081eef2d7c4033c3224660b6a5d4b4a4727f1c762"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 184,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000881475210e75b814d5b711090a064942b6f30605"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 185,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3e0f18fec11b027bc23fd8a1cac729cffab11d9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 186,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b69cd25391df0b18e6cafe9dd61b966388d6beec"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 187,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c0dcce9d4f0e5dbf20dc2631786550dbdeebf756"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 188,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3d1b0445c7d62fdb86e02c467f4239478b37f20"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 189,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c8f8e2f59dd95ff67c3d39109eca2e2a017d4c8a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 190,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d52fba65a52214a65c78dc7f95c9fee1f13a5955"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 191,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e2601273be4c89a729a3fe0af4bd6503bb20c27c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 192,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e3603cf313dcd49cc3061c9850a474d40aa81159"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 193,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e5b0a257f0420ed4860d5d431e6ad6744da08405"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 194,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f035af8a3dff1f90aeb21f9623589ae1330e9e09"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 195,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc8f57a04f4df6f167599162bf5fdaa098ac18cc"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 196,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000962a7d642178c87eeec92240669ec98f868dc54e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 197,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a5af072b89525ef22b60bb1aa2107a48f35d0cfe"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 198,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d802e2fe48392c104ce0401c7eca8a4456f1f16"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 199,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aec4075e4fc8ce829bc4f0cfd5e2fa10dd2b12d1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 200,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000463fc06d16e146ec9e4cb2ab8c3077732c75f38b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 201,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081590c16b9d1495d133cf881acf5cc0b56730b74"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 202,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001aae1bc09e1785c8cb00650db0c6015bd73b0c7e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 203,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3f1d077fa590018d3924ce8da1a085b4eae506d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 204,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008715ed9bbd4f8cfbed14f045556f19f39f11c75b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 205,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d5a06056701c7cfba12b1a384294148b9d2d8bca"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 206,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009027bd5b0d32b0cb51dce93e8add64aca3a24912"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 207,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000099b8226ec774c957ffe2747fdfbae8f22741e899"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 208,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009c81559aac49da60ff1e7755436dc2924d1a4c4f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 209,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036ed861a319278e5b6c39028884b0ca93df105d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 210,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2d2ecc7d94cfb8e70f60aeb97bf7f4c4cb8ef28"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 211,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c2322d5e0cb1dc57695ecae84e5f6868c17f1cb7"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 212,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b379b56bcacdd58ae0768654763881849bfaad94"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 213,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2dea18d040152c580f29195b29670633b0c9796"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 214,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036041d9f21901599b9825bf4ecdf03aee81be0a6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 215,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092890034a3dcb1c38c1184775788ba0f95c23f03"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 216,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cd64a3e77335b652f8582e081f02bf9c90f908a4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 217,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003348de5cc020eefa5d3b8212aefbc0c19d315f24"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 218,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d8208bbf403a5de65a61e45321580fd0e31d4432"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 219,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f6e9ccea1f646fee85e13ab3361c75959a94d5b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 220,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000097a6d7365e64d56b8a9aede0096a0fa2ace4eebc"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 221,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009adccfd429a7ba40e7945841164ea2cffa7611fd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 222,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003689c216f8f6ce7e2ce2a27c81a23096a787f532"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 223,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2498b4dc8402789736f7c94caf969ea65badfa2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 224,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d0e328b8fbc4a148eeae9e7b4791d7a6a0d2d07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 225,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      },
      {
        "transactionIndex": 56,
        "blockNumber": 17866317,
        "transactionHash": "0x72c6e686768165b3037e8910ddf881f17b4a6770ad6bb6e24c2e0bdb61f9df49",
        "address": "0x0082578eedFD01ec97c36165469D012D6DC257CC",
        "topics": [
          "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f56345338cb4cddaf915ebef3bfde63e70fe3053"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 226,
        "blockHash": "0x794e0fd45a534751c495e20e500616c91c6f7a951f73bd3c42c71694f7e32978"
      }
    ],
    "blockNumber": 17866317,
    "cumulativeGasUsed": "10398016",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x44a3ccddccae339d05200a8f4347f83a58847e52",
      "0xc31328e68ba9770d4c3375fd2b7c79c9904c711f",
      "0xc3c7ea560b5533da8eee31212a9595a419e6d631",
      "0x97b439db483bb0e02c709b2e948a32ee72daa82d",
      "0xb3b5102aee1557135449ec0d514f2b7334769af2",
      "0x184a973a0ed40b7c4ee187b844bd1455f2191a1d",
      "0x7637dcb54a019a027175964ad845763d3fc3b5cd",
      "0x78b05cc4f278662416083dfe211f7496abc38518",
      "0x69e68074f1aada957edd39c5eae0069973343f30",
      "0x4b5fe817488d86f55ab1a4e40598a3cfbde95b6a",
      "0x1a1427a73b7cb0f4ea3f71c6c8090c4366c8ebe1",
      "0x2177da04f9479496c2292d6344d306aa49beb34a",
      "0xf0d6999725115e3ead3d927eb3329d63afaec09b",
      "0xe11da9560b51f8918295edc5ab9c0a90e9ada20b",
      "0x047d0cb513a2ccb1ed44d4af271410a9c8d5248f",
      "0x12c29df62b1b254e1311bef777a37bf8c575b58d",
      "0x16a2ebd556af2a39eba349be7d6eba7a57c47711",
      "0x1da5331994e781ab0e2af9f85bfce2037a514170",
      "0x1f8615a2caa4c8ab08bf1312e022341022c90e37",
      "0x243db4aaa62b3785df27c364090749b96e45f3ec",
      "0x324111baf9886e0456d74cef0ecbd49ed0779ee1",
      "0x343e73d33639d9c354fa215ca23ffcd0f5604ac1",
      "0x367dc97068ab54ba1dfbfc0fad12fbcb7b3a0d09",
      "0x3c1bee74ff0d159ab06b6113417fc536499057c6",
      "0x461a5b8326ba0e2dfd133651a3b559dc8d3b0400",
      "0x4f55fd3b7ec169a364e34eb7f523ca5ceb12c888",
      "0x51787a2c56d710c68140bdadefd3a98bff96feb4",
      "0x59590178e9eddb027ed87bed9c1da8cd5129fed9",
      "0x5efdb6d8c798c2c2bea5b1961982a5944f92a5c1",
      "0x5f45c7ea2e094fea813a8a8813620ffcc4a19d0f",
      "0x626ffae9f5537d4fadb6065585213f095b106bfc",
      "0x65a4c69f4ea3fea89a0d4156c3d91c787472b670",
      "0x67164d8853d3dc9ab5d11cb6744e6f04401cf772",
      "0x679d5162bad71990abca0f18095948c12a2756b0",
      "0x72915ad3110eb31768a562f540ac1ebcd51d3dc8",
      "0x75432062a9bcc6bc5c294f44a8e3aa65bec8a64d",
      "0x7a3cf7122eb2e3f3820f0afaaac4206cdc50bd7e",
      "0x81eef2d7c4033c3224660b6a5d4b4a4727f1c762",
      "0x881475210e75b814d5b711090a064942b6f30605",
      "0xa3e0f18fec11b027bc23fd8a1cac729cffab11d9",
      "0xb69cd25391df0b18e6cafe9dd61b966388d6beec",
      "0xc0dcce9d4f0e5dbf20dc2631786550dbdeebf756",
      "0xc3d1b0445c7d62fdb86e02c467f4239478b37f20",
      "0xc8f8e2f59dd95ff67c3d39109eca2e2a017d4c8a",
      "0xd52fba65a52214a65c78dc7f95c9fee1f13a5955",
      "0xe2601273be4c89a729a3fe0af4bd6503bb20c27c",
      "0xe3603cf313dcd49cc3061c9850a474d40aa81159",
      "0xe5b0a257f0420ed4860d5d431e6ad6744da08405",
      "0xf035af8a3dff1f90aeb21f9623589ae1330e9e09",
      "0xfc8f57a04f4df6f167599162bf5fdaa098ac18cc",
      "0x962a7d642178c87eeec92240669ec98f868dc54e",
      "0xa5af072b89525ef22b60bb1aa2107a48f35d0cfe",
      "0x5d802e2fe48392c104ce0401c7eca8a4456f1f16",
      "0xaec4075e4fc8ce829bc4f0cfd5e2fa10dd2b12d1",
      "0x463fc06d16e146ec9e4cb2ab8c3077732c75f38b",
      "0x81590c16b9d1495d133cf881acf5cc0b56730b74",
      "0x1aae1bc09e1785c8cb00650db0c6015bd73b0c7e",
      "0xc3f1d077fa590018d3924ce8da1a085b4eae506d",
      "0x8715ed9bbd4f8cfbed14f045556f19f39f11c75b",
      "0xd5a06056701c7cfba12b1a384294148b9d2d8bca",
      "0x9027bd5b0d32b0cb51dce93e8add64aca3a24912",
      "0x99b8226ec774c957ffe2747fdfbae8f22741e899",
      "0x9c81559aac49da60ff1e7755436dc2924d1a4c4f",
      "0x36ed861a319278e5b6c39028884b0ca93df105d0",
      "0xb2d2ecc7d94cfb8e70f60aeb97bf7f4c4cb8ef28",
      "0xc2322d5e0cb1dc57695ecae84e5f6868c17f1cb7",
      "0xb379b56bcacdd58ae0768654763881849bfaad94",
      "0xd2dea18d040152c580f29195b29670633b0c9796",
      "0x36041d9f21901599b9825bf4ecdf03aee81be0a6",
      "0x92890034a3dcb1c38c1184775788ba0f95c23f03",
      "0xcd64a3e77335b652f8582e081f02bf9c90f908a4",
      "0x3348de5cc020eefa5d3b8212aefbc0c19d315f24",
      "0xd8208bbf403a5de65a61e45321580fd0e31d4432",
      "0xf6e9ccea1f646fee85e13ab3361c75959a94d5b0",
      "0x97a6d7365e64d56b8a9aede0096a0fa2ace4eebc",
      "0x9adccfd429a7ba40e7945841164ea2cffa7611fd",
      "0x3689c216f8f6ce7e2ce2a27c81a23096a787f532",
      "0xd2498b4dc8402789736f7c94caf969ea65badfa2",
      "0x0d0e328b8fbc4a148eeae9e7b4791d7a6a0d2d07",
      "0xf56345338cb4cddaf915ebef3bfde63e70fe3053"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "c3f378ba41e05b92972639af2d777060",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"genesisRecipients\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDesposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"degenerate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"degenerateMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"generate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"generateExisting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"generateMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"generateManyExisting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"regenerate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"degenerateAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"regenerateMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"svg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Visualize Value\",\"errors\":{\"InvalidToken()\":[{\"details\":\"Custom revert errors.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Message(address,address,uint256,string)\":{\"details\":\"Emitted when minting a token with a message.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"constructor\":{\"details\":\"Instanciate the contract...\"},\"degenerate(uint256,uint256)\":{\"params\":{\"amount\":\"The amount to degenerate (withdraws 0.008 ETH per item).\",\"id\":\"The token ID to destroy.\"}},\"degenerateMany(uint256[],uint256[])\":{\"params\":{\"amounts\":\"The amounts to degenerate (withdraws 0.008 ETH per item).\",\"ids\":\"The tokenIDs to destroy.\"}},\"generate(address,string)\":{\"params\":{\"message\":\"Mint the token with an optional message.\",\"recipient\":\"The address that should receive the token.\"}},\"generateExisting(address,address,uint256,string)\":{\"params\":{\"message\":\"Mint the token with an optional message.\",\"recipient\":\"The address that should receive the token.\",\"source\":\"The address of an existing owner of the token.\",\"tokenId\":\"The token ID to mint.\"}},\"generateMany(address[],uint256[])\":{\"params\":{\"amounts\":\"The number of tokens to send to each recipient.\",\"recipients\":\"The addresses that should receive the token.\"}},\"generateManyExisting(address[],address[],uint256[],uint256[])\":{\"params\":{\"amounts\":\"The number of tokens to send for each token.\",\"recipients\":\"The addresses that should receive the token.\",\"sources\":\"The addresses of existing owners of each token.\",\"tokenIds\":\"The tokenIDs to mint.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"regenerate(uint256,uint256)\":{\"params\":{\"amount\":\"The token amount to burn / recreate.\",\"id\":\"The token ID to burn.\"}},\"regenerateMany(uint256[],uint256[],uint256[])\":{\"params\":{\"amounts\":\"The number of tokens per id recreate.\",\"degenerateAmounts\":\"The number of tokens per id to burn.\",\"ids\":\"The existing token IDs that should be destroyed in the process.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"svg(uint256)\":{\"params\":{\"tokenId\":\"The token ID to render.\"}},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The token ID to get metadata for.\"}}},\"stateVariables\":{\"VV\":{\"details\":\"VV creator account.\"}},\"title\":\"Infinity token contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"degenerate(uint256,uint256)\":{\"notice\":\"Destroy the token to withdraw its desposited ETH.\"},\"degenerateMany(uint256[],uint256[])\":{\"notice\":\"Degenerate multiple tokens at once.\"},\"generate(address,string)\":{\"notice\":\"Create a new infinity check and deposit 0.008 ETH for each token.\"},\"generateExisting(address,address,uint256,string)\":{\"notice\":\"Copy an existing infinity check owned by someone and deposit 0.008 ETH for each token.\"},\"generateMany(address[],uint256[])\":{\"notice\":\"Create multiple infinity check tokens and deposit 0.008 ETH in each.\"},\"generateManyExisting(address[],address[],uint256[],uint256[])\":{\"notice\":\"Copy multiple infinity check tokens and deposit 0.008 ETH in each.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Infinities are never approved.\"},\"name()\":{\"notice\":\"The name of the collection.\"},\"price()\":{\"notice\":\"The price of an infinity token.\"},\"regenerate(uint256,uint256)\":{\"notice\":\"Swap an inifinity token for a new one.\"},\"regenerateMany(uint256[],uint256[],uint256[])\":{\"notice\":\"Create multiple new infinity check tokens and deposit 0.008 ETH in each.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Infinities are never approved.\"},\"svg(uint256)\":{\"notice\":\"Render SVG of the token.\"},\"symbol()\":{\"notice\":\"The symbol of the collection.\"},\"totalSupply()\":{\"notice\":\"Supply is (in)finite: (2^256 - 1)^2.\"},\"uri(uint256)\":{\"notice\":\"Render the encoded token metadata-URI.\"}},\"notice\":\"Imo notable.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Infinity.sol\":\"Infinity\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Infinity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./libraries/InfiniteArt.sol\\\";\\nimport \\\"./libraries/InfiniteBags.sol\\\";\\nimport \\\"./libraries/InfiniteGenerator.sol\\\";\\nimport \\\"./libraries/InfiniteMetadata.sol\\\";\\n\\nimport \\\"./standards/ERC1155.sol\\\";\\n\\n/// @title Infinity token contract.\\n/// @notice Imo notable.\\n/// @author Visualize Value\\ncontract Infinity is ERC1155 {\\n\\n    /// @notice The name of the collection.\\n    string public name = \\\"Infinity\\\";\\n\\n    /// @notice The symbol of the collection.\\n    string public symbol = unicode\\\"\\u221e\\\";\\n\\n    /// @notice The price of an infinity token.\\n    uint public price = 0.008 ether;\\n\\n    /// @dev VV creator account.\\n    address private constant VV = 0xc8f8e2F59Dd95fF67c3d39109ecA2e2A017D4c8a;\\n\\n    /// @dev Instanciate the contract...\\n    constructor(address[] memory genesisRecipients) ERC1155() payable {\\n        _checkDeposit(genesisRecipients.length);\\n\\n        uint count = genesisRecipients.length;\\n        for (uint i = 0; i < count;) {\\n            _mint(genesisRecipients[i], 0, 1, \\\"\\\");\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Deposit ether, receive random infinities\\n    receive() external payable {\\n        _generateViaDeposit(msg.sender, _randomId());\\n    }\\n\\n    /// @notice Create a new infinity check and deposit 0.008 ETH for each token.\\n    /// @param recipient The address that should receive the token.\\n    /// @param message Mint the token with an optional message.\\n    function generate(\\n        address recipient,\\n        string calldata message\\n    ) public payable {\\n        uint tokenId = _randomId();\\n\\n        _generateViaDeposit(recipient, tokenId);\\n\\n        _message(recipient, tokenId, message);\\n    }\\n\\n    /// @notice Copy an existing infinity check owned by someone and deposit 0.008 ETH for each token.\\n    /// @param source The address of an existing owner of the token.\\n    /// @param recipient The address that should receive the token.\\n    /// @param tokenId The token ID to mint.\\n    /// @param message Mint the token with an optional message.\\n    function generateExisting(\\n        address source,\\n        address recipient,\\n        uint tokenId,\\n        string calldata message\\n    ) public payable {\\n        _validateId(tokenId, source);\\n\\n        _generateViaDeposit(recipient, tokenId);\\n\\n        _message(recipient, tokenId, message);\\n    }\\n\\n    /// @notice Swap an inifinity token for a new one.\\n    /// @param id The token ID to burn.\\n    /// @param amount The token amount to burn / recreate.\\n    function regenerate(uint id, uint amount) public {\\n        // Execute burn\\n        _burn(msg.sender, id, amount);\\n\\n        // Mint a new token\\n        _mint(msg.sender, _randomId(), amount, \\\"\\\");\\n    }\\n\\n    /// @notice Destroy the token to withdraw its desposited ETH.\\n    /// @param id The token ID to destroy.\\n    /// @param amount The amount to degenerate (withdraws 0.008 ETH per item).\\n    function degenerate(\\n        uint id,\\n        uint amount\\n    ) public {\\n        // Execute burn\\n        _burn(msg.sender, id, amount);\\n\\n        // Withdraw funds\\n        _send(msg.sender, amount * price);\\n    }\\n\\n    /// @notice Create multiple infinity check tokens and deposit 0.008 ETH in each.\\n    /// @param recipients The addresses that should receive the token.\\n    /// @param amounts The number of tokens to send to each recipient.\\n    function generateMany(\\n        address[] calldata recipients,\\n        uint[] calldata amounts\\n    ) public payable {\\n        _checkDeposit(_totalAmount(amounts));\\n\\n        uint count = recipients.length;\\n        for (uint i = 0; i < count;) {\\n            _mint(recipients[i], _randomId(), amounts[i], \\\"\\\");\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Copy multiple infinity check tokens and deposit 0.008 ETH in each.\\n    /// @param sources The addresses of existing owners of each token.\\n    /// @param recipients The addresses that should receive the token.\\n    /// @param tokenIds The tokenIDs to mint.\\n    /// @param amounts The number of tokens to send for each token.\\n    function generateManyExisting(\\n        address[] calldata sources,\\n        address[] calldata recipients,\\n        uint[] calldata tokenIds,\\n        uint[] calldata amounts\\n    ) public payable {\\n        _checkDeposit(_totalAmount(amounts));\\n\\n        uint count = sources.length;\\n        for (uint i = 0; i < count;) {\\n            _validateId(tokenIds[i], sources[i]);\\n\\n            _mint(recipients[i], tokenIds[i], amounts[i], \\\"\\\");\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Create multiple new infinity check tokens and deposit 0.008 ETH in each.\\n    /// @param ids The existing token IDs that should be destroyed in the process.\\n    /// @param degenerateAmounts The number of tokens per id to burn.\\n    /// @param amounts The number of tokens per id recreate.\\n    function regenerateMany(\\n        uint[] calldata ids,\\n        uint[] calldata degenerateAmounts,\\n        uint[] calldata amounts\\n    ) public payable {\\n        if (_totalAmount(degenerateAmounts) != _totalAmount(amounts)) revert InvalidInput();\\n\\n        uint count = ids.length;\\n        for (uint i = 0; i < count;) {\\n            _burn(msg.sender, ids[i], degenerateAmounts[i]);\\n            _mint(msg.sender, _randomId(), amounts[i], \\\"\\\");\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /// @notice Degenerate multiple tokens at once.\\n    /// @param ids The tokenIDs to destroy.\\n    /// @param amounts The amounts to degenerate (withdraws 0.008 ETH per item).\\n    function degenerateMany(\\n        uint[] memory ids,\\n        uint[] memory amounts\\n    ) public {\\n        if (ids.length != amounts.length) revert InvalidInput();\\n\\n        // Execute burn\\n        _burnBatch(msg.sender, ids, amounts);\\n\\n        // Withdraw funds\\n        _send(msg.sender, _totalAmount(amounts) * price);\\n    }\\n\\n    /// @notice Render SVG of the token.\\n    /// @param tokenId The token ID to render.\\n    function svg(uint tokenId) public pure returns (string memory) {\\n        return InfiniteArt.renderSVG(InfiniteGenerator.tokenData(tokenId));\\n    }\\n\\n    /// @notice Render the encoded token metadata-URI.\\n    /// @param tokenId The token ID to get metadata for.\\n    function uri(uint tokenId) public pure override returns (string memory) {\\n        return InfiniteMetadata.tokenURI(InfiniteGenerator.tokenData(tokenId));\\n    }\\n\\n    /// @notice Supply is (in)finite: (2^256 - 1)^2.\\n    function totalSupply() public pure returns (uint) { return type(uint).max; }\\n    function totalSupply(uint) public pure returns (uint) { return type(uint).max; }\\n\\n    /// @dev Mint a token n times, based on the amount of ETH sent.\\n    function _generateViaDeposit(address recipient, uint tokenId) internal {\\n        uint amount  = msg.value / price;\\n        uint surplus = msg.value % price;\\n\\n        if (amount == 0) revert InvalidDesposit();\\n\\n        _mint(recipient, tokenId, amount, \\\"\\\");\\n        _send(recipient, surplus);\\n    }\\n\\n    /// @dev Validate IDs to minted tokens or randomize for initial mints. Exception for VV mints.\\n    function _validateId(uint id, address source) internal view {\\n        bool minted = balanceOf(source, id) > 0;\\n\\n        // If it's not already minted piece, or we are not VV, revert.\\n        if(! minted && msg.sender != VV) revert InvalidToken();\\n    }\\n\\n    /// @dev Make a random generative token ID.\\n    function _randomId() internal view returns (uint) {\\n        return uint(keccak256(abi.encodePacked(block.prevrandao, msg.sender, gasleft())));\\n    }\\n\\n    /// @dev Check whether the deposited Ether is a correct {price} multipe of the token {amount}\\n    function _checkDeposit(uint amount) internal {\\n        if (msg.value != amount * price) revert InvalidDesposit();\\n    }\\n\\n    /// @dev Get the sum of all given amounts\\n    function _totalAmount(uint[] memory amounts) internal pure returns (uint amount) {\\n        for (uint i = 0; i < amounts.length; i++) {\\n            amount += amounts[i];\\n        }\\n    }\\n\\n    /// @dev Send ETH to an address\\n    function _send(address to, uint value) internal {\\n        (bool success, ) = payable(to).call{value: value}(\\\"\\\");\\n        require(success, \\\"Unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /// @dev Emit a mint message, if provided\\n    function _message(address recipient, uint tokenId, string calldata message) internal {\\n        if (bytes(message).length > 0) {\\n            emit Message(msg.sender, recipient, tokenId, message);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd25d114fb625a904ce51a193188dd463b9084f1a1386793c5852e8d44e587136\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteArt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./InfiniteBags.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n@title  InfiniteArt\\n@author VisualizeValue\\n@notice Renders the Infinity visuals.\\n*/\\nlibrary InfiniteArt {\\n\\n    /// @dev Generate the SVG code for an Infinity token.\\n    function renderSVG(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<svg viewBox=\\\"0 0 800 800\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                renderStyle(data),\\n                renderDefs(),\\n                '<rect width=\\\"800\\\" height=\\\"800\\\" fill=\\\"var(--bg)\\\" />',\\n                '<g transform=\\\"scale(0.95)\\\" transform-origin=\\\"center\\\">',\\n                    renderGrid(),\\n                '</g>',\\n                renderNoise(data),\\n                '<g transform=\\\"scale(0.95)\\\" transform-origin=\\\"center\\\">',\\n                    renderSymbols(data),\\n                '</g>',\\n            '</svg>'\\n        );\\n    }\\n\\n    /// @dev Render CSS variables.\\n    function renderStyle(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<style>',\\n                ':root {',\\n                    '--bg: ', data.background, ';',\\n                    '--gr: ', data.gridColor, ';',\\n                '}',\\n            '</style>'\\n        );\\n    }\\n\\n    /// @dev Render SVG meta defenitions.\\n    function renderDefs() public pure returns (string memory) {\\n        return string.concat(\\n            '<defs>',\\n                '<rect id=\\\"box\\\" width=\\\"100\\\" height=\\\"100\\\" stroke=\\\"var(--gr)\\\" stroke-width=\\\"3\\\" style=\\\"paint-order: stroke;\\\" />'\\n                '<g id=\\\"row\\\">', renderGridRow(), '</g>',\\n                '<mask id=\\\"mask\\\"><rect width=\\\"800\\\" height=\\\"800\\\" fill=\\\"white\\\"/></mask>',\\n                '<path id=\\\"loop\\\" d=\\\"M 100 0 A 100 100, 0, 1, 1, 0 100 L 0 0 Z\\\"/>',\\n                '<g id=\\\"infinity\\\">',\\n                    '<use href=\\\"#loop\\\" />',\\n                    '<use href=\\\"#loop\\\" transform=\\\"scale(-1,-1)\\\" />',\\n                '</g>',\\n                '<filter id=\\\"noise\\\">',\\n                    '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.8\\\" stitchTiles=\\\"stitch\\\" numOctaves=\\\"1\\\" seed=\\\"8\\\"/>',\\n                    '<feColorMatrix type=\\\"saturate\\\" values=\\\"0\\\"/>',\\n                '</filter>',\\n            '</defs>'\\n        );\\n    }\\n\\n    /// @dev Generate the SVG code for the entire 8x8 grid.\\n    function renderGrid() public pure returns (string memory) {\\n        string memory grid;\\n        for (uint256 i; i < 8; i++) {\\n            grid = string.concat(\\n                grid,\\n                '<use href=\\\"#row\\\" transform=\\\"translate(0,', str(i*100), ')\\\" />'\\n            );\\n        }\\n\\n        return grid;\\n    }\\n\\n    /// @dev Generate the SVG code for rows in the 8x8 grid.\\n    function renderGridRow() public pure returns (string memory) {\\n        string memory row;\\n        for (uint256 i; i < 8; i++) {\\n            row = string.concat(\\n                row,\\n                '<use transform=\\\"translate(', str(i*100), ')\\\" href=\\\"#box\\\" />'\\n            );\\n        }\\n        return row;\\n    }\\n\\n    /// @dev Render the noise layer.\\n    function renderNoise(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<rect mask=\\\"url(#mask)\\\" width=\\\"800\\\" height=\\\"800\\\" fill=\\\"black\\\" filter=\\\"url(#noise)\\\" ',\\n                'style=\\\"mix-blend-mode: multiply;\\\" opacity=\\\"', data.light ? '0.248\\\"' : '0.8\\\"',\\n            '/>'\\n        );\\n    }\\n\\n    /// @dev Generate SVG code for the symbols.\\n    function renderSymbols(Token memory data) public pure returns (string memory) {\\n        uint space  = 800 / data.grid;\\n        uint center = space / 4;\\n        uint width  = space / 2;\\n\\n        string memory symbols;\\n        for (uint i = 0; i < data.count; i++) {\\n            Symbol memory symbol = data.symbols[i];\\n\\n            uint baseStroke = symbol.isInfinity ? 8 : 4;\\n            uint stroke = (data.grid < 8 ? baseStroke : baseStroke * 3 / 4) * data.grid / 2;\\n            uint scale  = width * 1000 / symbol.formWidth;\\n\\n            symbol.x      = str(i % data.grid * space + center);\\n            symbol.y      = str(i / data.grid * space + center);\\n            symbol.stroke = str(stroke);\\n            symbol.center = str(center);\\n            symbol.width  = str(width);\\n            symbol.scale  = scale < 1000\\n                ? string.concat('0.', str(scale))\\n                : str(scale / 1000);\\n\\n            symbols = string.concat(symbols, renderSymbol(symbol));\\n        }\\n        return symbols;\\n    }\\n\\n    /// @dev Generate SVG code for the symbols.\\n    function renderSymbol(Symbol memory symbol) public pure returns (string memory) {\\n        symbol.color.rendered = renderColor(symbol.color);\\n\\n        string memory rendered = symbol.form == 1 ? renderLoop(symbol)\\n                               : symbol.form == 2 ? renderInfinitySingle(symbol)\\n                               : symbol.form == 3 ? render90Loop(symbol)\\n                               : symbol.form == 4 ? renderInfinityPair(symbol)\\n                               : symbol.form == 5 ? render180Loop(symbol)\\n                               : symbol.form == 8 ? renderInfinityCheck(symbol)\\n                                                  : render360Loop(symbol);\\n\\n        return string.concat(\\n            '<g transform=\\\"translate(',symbol.x,',',symbol.y,') rotate(',symbol.rotation,')\\\" ',\\n                'transform-origin=\\\"',symbol.center,' ',symbol.center,'\\\" ',\\n                'stroke-width=\\\"', symbol.stroke,\\n            '\\\">',\\n                rendered,\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Helper to render a color to its SVG compliant HSL string.\\n    function renderColor(Color memory color) public pure returns (string memory) {\\n        if (bytes(color.rendered).length > 0) return color.rendered;\\n\\n        return string.concat('hsl(', str(color.h), ' ', str(color.s), '% ', str(color.l), '%)');\\n    }\\n\\n    /// @dev Render a single loop symbol.\\n    function renderLoop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<use href=\\\"#loop\\\" transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\" />'\\n        );\\n    }\\n\\n    /// @dev Render two loop symbols, one rotated by 90 degrees.\\n    function render90Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,0) scale(-1,1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render two loop symbols, one rotated by 180 degrees.\\n    function render180Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,200) scale(-1,-1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render four loop symbols to form a square.\\n    function render360Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,0) scale(-1,1)\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(0,200) scale(1,-1)\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,200) scale(-1,-1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Check: Render a single infinity.\\n    function renderInfinitySingle(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Double check: Render an infinity pair.\\n    function renderInfinityPair(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(90)\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Quadruple check: Render an infinity check.\\n    function renderInfinityCheck(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(45)\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(90)\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(135)\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Uint to string helper.\\n    function str(uint n) public pure returns (string memory) {\\n        return Utilities.uint2str(n);\\n    }\\n}\\n\",\"keccak256\":\"0xeb2476fdd33255d1e8358a153be0be4492ee1b26e04a324d7237f0d32484cd0b\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteBags.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n@title  InfiniteBags\\n@author VisualizeValue\\n@notice Bags to hold infinity token data. Imo pretty funny...\\n*/\\n\\n/// @dev Bag holding computed token data.\\nstruct Token {\\n    uint seed;\\n    string background;\\n    string gridColor;\\n    uint8 alloy;\\n    uint8 grid;\\n    uint8 count;\\n    uint8 band;\\n    uint8 gradient;\\n    bool continuous;\\n    bool mapColors;\\n    bool light;\\n    Symbol[64] symbols;\\n}\\n\\n/// @dev Bag holding computed symbol data.\\nstruct Symbol {\\n    uint form;\\n    uint16 formWidth;\\n    bool isInfinity;\\n    string rotation;\\n    string stroke;\\n    string center;\\n    string scale;\\n    string width;\\n    string x;\\n    string y;\\n    uint colorIdx;\\n    Color color;\\n}\\n\\n/// @dev Bag holding color data.\\nstruct Color {\\n    uint16 h;\\n    uint16 s;\\n    uint16 l;\\n    string rendered;\\n}\\n\",\"keccak256\":\"0x9851c0b999d3fcda7c07d9ec496c1902ff46a2334ec29fe50c37b1ffbb0b72c1\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./InfiniteBags.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n@title  InfiniteGenerator\\n@author VisualizeValue\\n@notice Gathers the data to render Infinity visuals.\\n*/\\nlibrary InfiniteGenerator {\\n\\n    /// @dev 16 distinct colors + void.\\n    uint8 public constant ELEMENTS = 17;\\n\\n    /// @dev Number of shades for each color.\\n    uint8 public constant SHADES = 4;\\n\\n    /// @dev Collect relevant rendering data for easy access across functions.\\n    function tokenData(uint tokenId) public pure returns (Token memory data) {\\n        data.seed        = tokenId;\\n        data.light       = tokenId % 4096 == 0 ? true : false;\\n        data.background  = data.light == true ? '#FFFFFF' : '#111111';\\n        data.gridColor   = data.light == true ? '#F5F5F5' : '#19181B';\\n        data.grid        = getGrid(data);\\n        data.count       = data.grid ** 2;\\n        data.alloy       = getAlloy(data);\\n        data.band        = getBand(data);\\n        data.continuous  = getContinuous(data);\\n        data.gradient    = getGradient(data);\\n        data.mapColors   = getColorMap(data);\\n        data.symbols     = getSymbols(data);\\n    }\\n\\n    /// @dev Define the grid for a token.\\n    function getGrid(Token memory data) public pure returns (uint8) {\\n        if (data.seed == 0) return 1; // Genesis token override.\\n\\n        uint n = Utilities.random(data.seed, 'grid', 160);\\n\\n        return n <  1 ? 1\\n             : n <  8 ? 2\\n             : n < 32 ? 4\\n                      : 8;\\n    }\\n\\n    /// @dev Define the color band size for a token.\\n    function getBand(Token memory data) public pure returns (uint8) {\\n        // Four times the number of used elements, min 1.\\n        return Utilities.max(data.alloy * SHADES, 1);\\n    }\\n\\n    /// @dev Whether to map symbols to colors.\\n    function getColorMap(Token memory data) public pure returns (bool) {\\n        // 20% for gradients; 8% for skittles.\\n        return data.gradient > 0\\n            ? Utilities.random(data.seed, 'color_map', 100) < 20\\n            : Utilities.random(data.seed, 'color_map', 100) < 8;\\n    }\\n\\n    /// @dev Whether color banding is continuous or random. 50/50.\\n    function getContinuous(Token memory data) public pure returns (bool) {\\n        return Utilities.random(data.seed, 'continuous', 2) < 1;\\n    }\\n\\n    /// @dev Get the number of distinct elements used. 0 for Isolates.\\n    function getAlloy(Token memory data) public pure returns (uint8) {\\n        if (data.grid == 1) return 0;\\n\\n        uint8 n = uint8(Utilities.random(data.seed, 'alloy', 100));\\n\\n        return n >= 56 ? 4 + n % (ELEMENTS - 4) // Complete\\n             : n >= 24 ? 2                     // Compound\\n             : n >=  4 ? 1                    // Composite\\n                       : 0;                  // Isolate\\n    }\\n\\n    /// @dev Choose a gradient for the token.\\n    function getGradient(Token memory data) public pure returns (uint8) {\\n        if (data.grid == 1 || data.alloy == 0) return 0; // No gradients for 1x1 or isolate tokens\\n        if (Utilities.random(data.seed, 'gradient', 10) < 8) return 0; // 80% have no gradient\\n\\n        uint8 options = data.grid == 2 ? 2 : 7;\\n        uint8[7] memory GRADIENTS = data.grid == 2 ? [1, 2, 0, 0, 0, 0, 0]\\n                                  : data.grid == 4 ? [1, 2, 3, 4, 5, 8, 10]\\n                                                   : [1, 2, 4, 7, 8, 9, 16];\\n\\n        return GRADIENTS[Utilities.random(data.seed, 'select_gradient', options)];\\n    }\\n\\n    /// @dev Get the symbols for all slots on the grid.\\n    function getSymbols(Token memory data) public pure returns (Symbol[64] memory symbols) {\\n        uint8[7] memory forms          = [1, 2, 3, 4, 5, 8, 9]; // Seven distinct symbols.\\n        uint8[7] memory rotationCounts = [2, 4, 4, 2, 2, 0, 0]; // How often we rotate.\\n\\n        (uint[64] memory colorIndexes, Color[64] memory colors) = getColors(data);\\n        uint[64] memory formColorMap;\\n\\n        for (uint i = 0; i < data.count; i++) {\\n            symbols[i].colorIdx = colorIndexes[i];\\n            symbols[i].color = colors[i];\\n\\n            uint formIdx = getFormIdx(data, i);\\n            uint form = forms[formIdx];\\n            if (data.mapColors) {\\n                (formColorMap, form) = setGetMap(formColorMap, symbols[i].colorIdx, form);\\n            }\\n            symbols[i].form = form;\\n\\n            symbols[i].isInfinity = symbols[i].form % 2 == 0;\\n            symbols[i].formWidth = symbols[i].isInfinity ? 400 : 200;\\n\\n            uint rotationIncrement = symbols[i].isInfinity ? 45 : 90;\\n            uint rotations = rotationCounts[formIdx] > 0\\n                ? Utilities.random(\\n                    data.seed,\\n                    string.concat('rotation', str(i)),\\n                    rotationCounts[formIdx]\\n                )\\n                : 0;\\n            symbols[i].rotation = str(rotations * rotationIncrement);\\n        }\\n    }\\n\\n    /// @dev Get shape of a given symbol of a token.\\n    function getFormIdx(Token memory data, uint i) public pure returns (uint) {\\n        if (data.seed == 0) return 5; // Genesis token is an infinity flower.\\n\\n        uint random = Utilities.random(data.seed, string.concat('form', str(i)), 10);\\n        if (random == 0) return 0; // 10% Single Loops\\n\\n        uint8[3] memory common = [1, 3, 5]; // Infinities\\n        uint8[3] memory uncommon = [2, 4, 6]; // Loops\\n\\n        uint idx = Utilities.random(data.seed, string.concat('form-idx', str(i)), 3);\\n        return random < 8 ? common[idx] : uncommon[idx];\\n    }\\n\\n    /// @dev Get all colors available to choose from.\\n    function allColors() public pure returns (Color[68] memory colors) {\\n        // One \\\"Void\\\" color with 4 shades.\\n        uint8[4] memory voidLums = [16, 32, 80, 96];\\n        for (uint i = 0; i < SHADES; i++) {\\n            colors[i].h = 270;\\n            colors[i].s = 8;\\n            colors[i].l = voidLums[i];\\n        }\\n\\n        // 16 distinct colors with 4 shades each.\\n        uint8 count = 4*4;\\n        uint16 startHue = 256;\\n        uint8[4] memory lums = [56, 60, 64, 72];\\n        for (uint8 i = 0; i < 16; i++) {\\n            uint16 hue = (startHue + 360 * i / count) % 360;\\n\\n            for(uint8 e = 0; e < 4; e++) {\\n                uint8 idx = 4+i*4+e;\\n                colors[idx].h = hue;\\n                colors[idx].s = 88;\\n                colors[idx].l = lums[e];\\n            }\\n        }\\n    }\\n\\n    /// @dev Get the color variations for a specific token. Compute gradients / skittles.\\n    function getColors(Token memory data) public pure returns (\\n        uint[64] memory colorIndexes,\\n        Color[64] memory colors\\n    ) {\\n        Color[68] memory all = allColors();\\n        uint[68] memory options = getColorOptions(data);\\n        bool reverse = Utilities.random(data.seed, 'reverse', 2) > 0;\\n\\n        for (uint i = 0; i < data.count; i++) {\\n            colorIndexes[i] = (\\n                data.gradient > 0\\n                    ? getGradientColor(data, i)\\n                    : getRandomColor(data, i)\\n            ) % 68;\\n\\n            uint idx = reverse ? data.count - 1 - i : i;\\n\\n            colors[idx] = all[options[colorIndexes[i]]];\\n\\n            // Paradoxical, i know. Opepen your eyes. All one. Common fate.\\n            if (data.light) colors[idx].rendered = '#080808';\\n        }\\n    }\\n\\n    /// @dev Get the colors to choose from for a given token.\\n    function getColorOptions(Token memory data) public pure returns (uint[68] memory options) {\\n        uint count = Utilities.max(1, data.alloy);\\n        for (uint element = 0; element < count; element++) {\\n            uint idx = element * SHADES;\\n\\n            uint chosen = data.continuous && element > 0\\n                // Increment previous by one for a continuous band.\\n                ? (options[idx - 1] / SHADES + 1) % ELEMENTS\\n                // Random selection for hard shifts in color.\\n                : Utilities.random(data.seed, string.concat('element', str(element)), ELEMENTS);\\n\\n            uint chosenIdx = chosen * SHADES;\\n\\n            for (uint shade = 0; shade < SHADES; shade++) {\\n                options[idx + shade] = chosenIdx + shade;\\n            }\\n        }\\n    }\\n\\n    /// @dev Compute the gradient colors for a gradient token.\\n    function getGradientColor(Token memory data, uint i) public pure returns (uint) {\\n        uint offset;\\n        if (data.gradient == 3 || data.gradient == 7) {\\n            // Fix angled gradient y-shift.\\n            offset = data.grid + 1;\\n        }\\n\\n        return ((offset + i) * data.gradient * data.band / data.count) % data.band;\\n    }\\n\\n    /// @dev Compute colors for a skittle tokens.\\n    function getRandomColor(Token memory data, uint i) public pure returns (uint) {\\n        uint8 max = Utilities.max(SHADES, data.band);\\n        string memory key = data.alloy == 0 ? '0' : str(i);\\n        return Utilities.random(data.seed, string.concat('random_color_', key), max);\\n    }\\n\\n    /// @dev Helper to keep track of a key value store in memory.\\n    function setGetMap(\\n        uint[64] memory map, uint key, uint value\\n    ) public pure returns (uint[64] memory, uint) {\\n        uint k = key % 64;\\n\\n        if (map[k] == 0) {\\n            map[k] = value;\\n        }\\n\\n        return (map, map[k]);\\n    }\\n\\n    /// @dev Uint to string helper.\\n    function str(uint n) public pure returns (string memory) {\\n        return Utilities.uint2str(n);\\n    }\\n}\\n\",\"keccak256\":\"0x68430f463036d97d635dab2f3def9861099246cefa2489e664bf80c0c9044794\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./InfiniteBags.sol\\\";\\nimport \\\"./InfiniteArt.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n@title  InfiniteMetadata\\n@author VisualizeValue\\n@notice Renders ERC1155 compatible metadata for Infinity tokens.\\n*/\\nlibrary InfiniteMetadata {\\n\\n    /// @dev Render the JSON Metadata for a given Infinity token.\\n    /// @param data The render data for our token\\n    function tokenURI(\\n        Token memory data\\n    ) public pure returns (string memory) {\\n        bytes memory metadata = abi.encodePacked(\\n            '{',\\n                '\\\"name\\\": \\\"Infinity\\\",',\\n                unicode'\\\"description\\\": \\\"\\u221e\\\",',\\n                '\\\"image\\\": ',\\n                    '\\\"data:image/svg+xml;base64,',\\n                    Base64.encode(abi.encodePacked(InfiniteArt.renderSVG(data))),\\n                    '\\\",',\\n                '\\\"attributes\\\": [', attributes(data), ']',\\n            '}'\\n        );\\n\\n        return string.concat(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(metadata)\\n        );\\n    }\\n\\n    /// @dev Render the JSON atributes for a given Infinity token.\\n    /// @param data The check to render.\\n    function attributes(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            trait('Light', light(data.light), ','),\\n            trait('Grid', grid(data), ','),\\n            data.light  ? '' : trait('Elements',  elements(data), ','),\\n            data.light  ? '' : trait('Gradient',  gradient(data), ','),\\n            data.light  ? '' : trait('Band',      band(data), ','),\\n            trait('Symbols',   symbols(data), '')\\n        );\\n    }\\n\\n    /// @dev Get the value for the 'Light' attribute.\\n    function light(bool on) public pure returns (string memory) {\\n        return on ? 'On' : 'Off';\\n    }\\n\\n    /// @dev Get the value for the 'Grid' attribute.\\n    function grid(Token memory data) public pure returns (string memory) {\\n        string memory g = Utilities.uint2str(data.grid);\\n\\n        return string.concat(g, 'x', g);\\n    }\\n\\n    /// @dev Get the value for the 'Elements' attribute.\\n    function elements(Token memory data) public pure returns (string memory) {\\n        return data.alloy == 0 ? 'Isolate'\\n             : data.alloy == 1 ? 'Composite'\\n             : data.alloy == 2 ? 'Compound'\\n                               : 'Complete';\\n    }\\n\\n    /// @dev Get the value for the 'Band' attribute.\\n    function band(Token memory data) public pure returns (string memory) {\\n        return (data.continuous || data.alloy < 2) ? 'Continuous' : 'Cut';\\n    }\\n\\n    /// @dev Get the value for the 'Gradient' attribute.\\n    function gradient(Token memory data) public pure returns (string memory) {\\n        return [\\n            // [0, 1, 2, 3, 4, 5, _, 7, 8, 9, 10, _, _, _, _, _, 16]\\n            'None', 'Linear', 'Double Linear', 'Angled Down', 'Ordered', 'Angled Up', '', 'Angled Down', 'Linear Z',\\n            'Angled', 'Angled Up', '', '', '', '', '', 'Double Linear Z'\\n        ][data.gradient];\\n    }\\n\\n    /// @dev Get the value for the 'Symbols' attribute.\\n    function symbols(Token memory data) public pure returns (string memory) {\\n        return data.mapColors ? 'Mapped' : 'Random';\\n    }\\n\\n    /// @dev Generate the SVG snipped for a single attribute.\\n    /// @param traitType The `trait_type` for this trait.\\n    /// @param traitValue The `value` for this trait.\\n    /// @param append Helper to append a comma.\\n    function trait(\\n        string memory traitType, string memory traitValue, string memory append\\n    ) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"trait_type\\\": \\\"', traitType, '\\\",'\\n                '\\\"value\\\": \\\"', traitValue, '\\\"'\\n            '}',\\n            append\\n        ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5972b314475fa902079c0214e01a099e390bf725f273cc7e0a855ba172ae9b13\",\"license\":\"MIT\"},\"contracts/libraries/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Utilities {\\n    /// @dev Zero-index based pseudorandom number based on one input and max bound\\n    function random(uint256 input, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input))) % _max);\\n    }\\n\\n    /// @dev Zero-index based salted pseudorandom number based on two inputs and max bound\\n    function random(uint256 input, string memory salt, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input, salt))) % _max);\\n    }\\n\\n    /// @dev Convert an integer to a string\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @dev Get the smallest non zero number\\n    function minGt0(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two\\n            ? two > 0\\n                ? two\\n                : one\\n            : one;\\n    }\\n\\n    /// @dev Get the smaller number\\n    function min(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one < two ? one : two;\\n    }\\n\\n    /// @dev Get the larger number\\n    function max(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two ? one : two;\\n    }\\n\\n    /// @dev Get the average between two numbers\\n    function avg(uint8 one, uint8 two) public pure returns (uint8 result) {\\n        unchecked {\\n            result = (one >> 1) + (two >> 1) + (one & two & 1);\\n        }\\n    }\\n\\n    /// @dev Get the days since another date (input is seconds)\\n    function day(uint256 from, uint256 to) public pure returns (uint24) {\\n        return uint24((to - from) / 24 hours + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x529f3946295d83e9961a487a953572220c07f1ab38c53619a5342a3bca957b42\",\"license\":\"MIT\"},\"contracts/standards/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derived from OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Simplified implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    /**\\n     * @dev Emitted when minting a token with a message.\\n     */\\n    event Message(address indexed from, address indexed to, uint256 indexed id, string message);\\n\\n    /**\\n     * @dev Custom revert errors.\\n     */\\n    error InvalidToken();\\n    error InvalidInput();\\n    error InvalidDesposit();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {}\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        if (account == address(0)) return 0;\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @notice Infinities are never approved.\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address, bool) public virtual override {\\n        revert(\\\"No approvals on infinities\\\");\\n    }\\n\\n    /**\\n     * @notice Infinities are never approved.\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address, address) public view virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender(),\\n            \\\"ERC1155: caller is not token owner\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender(),\\n            \\\"ERC1155: caller is not token owner\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(from, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(from, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(from, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(from, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(_msgSender(), from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev Batched version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (_isContract(to)) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (_isContract(to)) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x29418f139cd9bf7ce0865be79967db09b76a1d53c6b6903e118cea1c532d0448\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526008608090815267496e66696e69747960c01b60a0526001906200002990826200047b565b5060408051808201909152600381526271444f60e91b60208201526002906200005390826200047b565b50661c6bf526340000600355604051620034bf380380620034bf833981016040819052620000819162000572565b80516200008e90620000ec565b80515f5b81811015620000e357620000da838281518110620000b457620000b462000637565b60200260200101515f600160405180602001604052805f8152506200011e60201b60201c565b60010162000092565b5050506200080c565b600354620000fb90826200065f565b34146200011b576040516328df225d60e01b815260040160405180910390fd5b50565b6001600160a01b038416620001845760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084015b60405180910390fd5b5f838152602081815260408083206001600160a01b0388168452909152812080543392859291620001b79084906200067f565b909155505060408051858152602081018590526001600160a01b03808816925f92918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a462000217815f878787876200021e565b5050505050565b6001600160a01b0384163b15620003d75760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620002659089908990889088908890600401620006da565b6020604051808303815f875af1925050508015620002a2575060408051601f3d908101601f191682019092526200029f9181019062000720565b60015b6200036257620002b162000750565b806308c379a003620002f15750620002c86200076a565b80620002d55750620002f3565b8060405162461bcd60e51b81526004016200017b9190620007f8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016200017b565b6001600160e01b0319811663f23a6e6160e01b14620003d55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016200017b565b505b505050505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200040857607f821691505b6020821081036200042757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111562000476575f81815260208120601f850160051c81016020861015620004555750805b601f850160051c820191505b81811015620003d75782815560010162000461565b505050565b81516001600160401b03811115620004975762000497620003df565b620004af81620004a88454620003f3565b846200042d565b602080601f831160018114620004e5575f8415620004cd5750858301515b5f19600386901b1c1916600185901b178555620003d7565b5f85815260208120601f198616915b828110156200051557888601518255948401946001909101908401620004f4565b50858210156200053357878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b601f8201601f191681016001600160401b03811182821017156200056b576200056b620003df565b6040525050565b5f602080838503121562000584575f80fd5b82516001600160401b03808211156200059b575f80fd5b818501915085601f830112620005af575f80fd5b815181811115620005c457620005c4620003df565b8060051b9150604051620005db8584018262000543565b81815291830184019184810188841115620005f4575f80fd5b938501935b838510156200062b57845192506001600160a01b03831683146200061c575f8081fd5b828152938501938501620005f9565b50979650505050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176200067957620006796200064b565b92915050565b808201808211156200067957620006796200064b565b5f81518084525f5b81811015620006bb576020818501810151868301820152016200069d565b505f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f90620007159083018462000695565b979650505050505050565b5f6020828403121562000731575f80fd5b81516001600160e01b03198116811462000749575f80fd5b9392505050565b5f60033d1115620007675760045f803e505f5160e01c5b90565b5f60443d1015620007785790565b6040516003193d81016004833e81513d6001600160401b038083116024840183101715620007a857505050505090565b8285019150815181811115620007c15750505050505090565b843d8701016020828501011115620007dc5750505050505090565b620007ed6020828601018762000543565b509095945050505050565b602081525f62000749602083018462000695565b612ca5806200081a5f395ff3fe60806040526004361061016f575f3560e01c806344b285db116100c65780639c095f561161007c578063bd85b03911610057578063bd85b039146103ad578063e985e9c5146103cd578063f242432a146103ee575f80fd5b80639c095f561461035a578063a035b1fe14610379578063a22cb4651461038e575f80fd5b80634e840992116100ac5780634e8409921461031457806368987a831461033357806395d89b4114610346575f80fd5b806344b285db146102c95780634e1273f4146102e8575f80fd5b806318160ddd116101265780632bfc3052116101015780632bfc3052146102845780632eb2c2d6146102975780633f6b5fde146102b6575f80fd5b806318160ddd1461024b57806325431b181461025e578063262fb60814610271575f80fd5b806306fdde031161015657806306fdde03146101ec5780630e89341c1461020d57806310981eb31461022c575f80fd5b8062fdd58e1461018b57806301ffc9a7146101bd575f80fd5b36610187576101853361018061040d565b610463565b005b5f80fd5b348015610196575f80fd5b506101aa6101a5366004611a68565b6104cf565b6040519081526020015b60405180910390f35b3480156101c8575f80fd5b506101dc6101d7366004611aa5565b61050d565b60405190151581526020016101b4565b3480156101f7575f80fd5b506102006105a7565b6040516101b49190611b14565b348015610218575f80fd5b50610200610227366004611b26565b610633565b348015610237575f80fd5b50610185610246366004611b3d565b610726565b348015610256575f80fd5b505f196101aa565b61018561026c366004611ba2565b61074c565b61018561027f366004611c4d565b610773565b610185610292366004611ce0565b610898565b3480156102a2575f80fd5b506101856102b1366004611ee9565b610928565b6101856102c4366004611f8c565b61099d565b3480156102d4575f80fd5b506102006102e3366004611b26565b6109be565b3480156102f3575f80fd5b50610307610302366004611fdb565b610a13565b6040516101b491906120d9565b34801561031f575f80fd5b5061018561032e3660046120eb565b610b4f565b610185610341366004612134565b610b96565b348015610351575f80fd5b50610200610c90565b348015610365575f80fd5b50610185610374366004611b3d565b610c9d565b348015610384575f80fd5b506101aa60035481565b348015610399575f80fd5b506101856103a83660046121fc565b610cc9565b3480156103b8575f80fd5b506101aa6103c7366004611b26565b505f1990565b3480156103d8575f80fd5b506101dc6103e7366004612231565b5f92915050565b3480156103f9575f80fd5b50610185610408366004612262565b610d11565b5f44335a6040516020016104469392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b604051602081830303815290604052805190602001205f1c905090565b5f6003543461047291906122ea565b90505f6003543461048391906122fd565b9050815f036104a5576040516328df225d60e01b815260040160405180910390fd5b6104bf84848460405180602001604052805f815250610d81565b6104c98482610e8c565b50505050565b5f6001600160a01b0383166104e557505f610507565b505f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061056f57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061050757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610507565b600180546105b490612310565b80601f01602080910402602001604051908101604052809291908181526020018280546105e090612310565b801561062b5780601f106106025761010080835404028352916020019161062b565b820191905f5260205f20905b81548152906001019060200180831161060e57829003601f168201915b505050505081565b60607312b7f0E2F3D562b0Cd012bd58E2D620bFdFE542f634afd561b73b0047233DE84066b491f093380B8ca3CFf4f733363b4b5b48f856040518263ffffffff1660e01b815260040161068891815260200190565b5f60405180830381865af41580156106a2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526106c9919081019061263f565b6040518263ffffffff1660e01b81526004016106e59190612923565b5f60405180830381865af41580156106ff573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105079190810190612a2b565b610731338383610f56565b61074833600354836107439190612a5d565b610e8c565b5050565b610756838661109a565b6107608484610463565b61076c84848484611101565b5050505050565b6107ae8282808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b6107e98585808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b146108075760405163b4fa3fb360e01b815260040160405180910390fd5b845f5b8181101561088e5761084d3389898481811061082857610828612a74565b9050602002013588888581811061084157610841612a74565b90506020020135610f56565b6108863361085961040d565b86868581811061086b5761086b612a74565b9050602002013560405180602001604052805f815250610d81565b60010161080a565b5050505050505050565b6108db6108d68383808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b611198565b825f5b81811015610920576109188686838181106108fb576108fb612a74565b90506020020160208101906109109190612a88565b61085961040d565b6001016108de565b505050505050565b6001600160a01b03851633146109905760405162461bcd60e51b815260206004820152602260248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b61076c85858585856111c7565b5f6109a661040d565b90506109b28482610463565b6104c984828585611101565b606073C6B17CAFcc2439ef4833fe6a073bA71438112f8763929ecd9d73b0047233DE84066b491f093380B8ca3CFf4f733363b4b5b48f856040518263ffffffff1660e01b815260040161068891815260200190565b60608151835114610a8c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610987565b5f835167ffffffffffffffff811115610aa757610aa7611d47565b604051908082528060200260200182016040528015610ad0578160200160208202803683370190505b5090505f5b8451811015610b4757610b1a858281518110610af357610af3612a74565b6020026020010151858381518110610b0d57610b0d612a74565b60200260200101516104cf565b828281518110610b2c57610b2c612a74565b6020908102919091010152610b4081612aa1565b9050610ad5565b509392505050565b8051825114610b715760405163b4fa3fb360e01b815260040160405180910390fd5b610b7c338383611417565b61074833600354610b8c8461114d565b6107439190612a5d565b610bd46108d68383808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b865f5b81811015610c8457610c27868683818110610bf457610bf4612a74565b905060200201358b8b84818110610c0d57610c0d612a74565b9050602002016020810190610c229190612a88565b61109a565b610c7c888883818110610c3c57610c3c612a74565b9050602002016020810190610c519190612a88565b878784818110610c6357610c63612a74565b9050602002013586868581811061086b5761086b612a74565b600101610bd7565b50505050505050505050565b600280546105b490612310565b610ca8338383610f56565b61074833610cb461040d565b8360405180602001604052805f815250610d81565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f20617070726f76616c73206f6e20696e66696e69746965730000000000006044820152606401610987565b6001600160a01b0385163314610d745760405162461bcd60e51b815260206004820152602260248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526132b960f11b6064820152608401610987565b61076c8585858585611628565b6001600160a01b038416610dfd5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610987565b5f838152602081815260408083206001600160a01b0388168452909152812080543392859291610e2e908490612ab9565b909155505060408051858152602081018590526001600160a01b03808816925f92918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461076c815f878787876117a5565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610ed5576040519150601f19603f3d011682016040523d82523d5f602084013e610eda565b606091505b5050905080610f515760405162461bcd60e51b815260206004820152603160248201527f556e61626c6520746f2073656e642076616c75652c20726563697069656e742060448201527f6d617920686176652072657665727465640000000000000000000000000000006064820152608401610987565b505050565b6001600160a01b038316610fb85760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610987565b5f828152602081815260408083206001600160a01b0387168452909152902054818110156110345760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610987565b5f838152602081815260408083206001600160a01b038816808552908352818420868603905581518781529283018690529133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a450505050565b5f806110a683856104cf565b1190508015816110ca57503373c8f8e2f59dd95ff67c3d39109eca2e2a017d4c8a14155b15610f51576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156104c95782846001600160a01b0316336001600160a01b03167fdd99aef5e4fdfad84059320be40f5dc0f015dc4025f56bd4010608c6743bc22e858560405161108c929190612acc565b5f805b82518110156111925782818151811061116b5761116b612a74565b60200260200101518261117e9190612ab9565b91508061118a81612aa1565b915050611150565b50919050565b6003546111a59082612a5d565b34146111c4576040516328df225d60e01b815260040160405180910390fd5b50565b81518351146112295760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610987565b6001600160a01b03841661128d5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610987565b5f5b83518110156113b1575f8482815181106112ab576112ab612a74565b602002602001015190505f8483815181106112c8576112c8612a74565b6020908102919091018101515f84815280835260408082206001600160a01b038d16835290935291909120549091508181101561135a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610987565b5f838152602081815260408083206001600160a01b038d8116855292528083208585039055908a16825281208054849290611396908490612ab9565b92505081905550505050806113aa90612aa1565b905061128f565b50836001600160a01b0316856001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611401929190612afa565b60405180910390a461076c858686868686611952565b6001600160a01b0383166114795760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610987565b80518251146114db5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610987565b335f5b83518110156115d8575f8482815181106114fa576114fa612a74565b602002602001015190505f84838151811061151757611517612a74565b6020908102919091018101515f84815280835260408082206001600160a01b038c1683529093529190912054909150818110156115a25760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610987565b5f928352602083815260408085206001600160a01b038b16865290915290922091039055806115d081612aa1565b9150506114de565b505f6001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161108c929190612afa565b6001600160a01b03841661168c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610987565b5f838152602081815260408083206001600160a01b03891684529091529020548281101561170f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610987565b5f848152602081815260408083206001600160a01b038a811685529252808320868503905590871682528120805485929061174b908490612ab9565b909155505060408051858152602081018590526001600160a01b03808816929089169182917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109208687878787875b6001600160a01b0384163b156109205760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906117e99089908990889088908890600401612b1e565b6020604051808303815f875af1925050508015611823575060408051601f3d908101601f1916820190925261182091810190612b60565b60015b6118d85761182f612b7b565b806308c379a0036118685750611843612b94565b8061184e575061186a565b8060405162461bcd60e51b81526004016109879190611b14565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610987565b6001600160e01b0319811663f23a6e6160e01b146119495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610987565b50505050505050565b6001600160a01b0384163b156109205760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119969089908990889088908890600401612c12565b6020604051808303815f875af19250505080156119d0575060408051601f3d908101601f191682019092526119cd91810190612b60565b60015b6119dc5761182f612b7b565b6001600160e01b0319811663bc197c8160e01b146119495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610987565b80356001600160a01b0381168114611a63575f80fd5b919050565b5f8060408385031215611a79575f80fd5b611a8283611a4d565b946020939093013593505050565b6001600160e01b0319811681146111c4575f80fd5b5f60208284031215611ab5575f80fd5b8135611ac081611a90565b9392505050565b5f5b83811015611ae1578181015183820152602001611ac9565b50505f910152565b5f8151808452611b00816020860160208601611ac7565b601f01601f19169290920160200192915050565b602081525f611ac06020830184611ae9565b5f60208284031215611b36575f80fd5b5035919050565b5f8060408385031215611b4e575f80fd5b50508035926020909101359150565b5f8083601f840112611b6d575f80fd5b50813567ffffffffffffffff811115611b84575f80fd5b602083019150836020828501011115611b9b575f80fd5b9250929050565b5f805f805f60808688031215611bb6575f80fd5b611bbf86611a4d565b9450611bcd60208701611a4d565b935060408601359250606086013567ffffffffffffffff811115611bef575f80fd5b611bfb88828901611b5d565b969995985093965092949392505050565b5f8083601f840112611c1c575f80fd5b50813567ffffffffffffffff811115611c33575f80fd5b6020830191508360208260051b8501011115611b9b575f80fd5b5f805f805f8060608789031215611c62575f80fd5b863567ffffffffffffffff80821115611c79575f80fd5b611c858a838b01611c0c565b90985096506020890135915080821115611c9d575f80fd5b611ca98a838b01611c0c565b90965094506040890135915080821115611cc1575f80fd5b50611cce89828a01611c0c565b979a9699509497509295939492505050565b5f805f8060408587031215611cf3575f80fd5b843567ffffffffffffffff80821115611d0a575f80fd5b611d1688838901611c0c565b90965094506020870135915080821115611d2e575f80fd5b50611d3b87828801611c0c565b95989497509550505050565b634e487b7160e01b5f52604160045260245ffd5b610800810181811067ffffffffffffffff82111715611d7c57611d7c611d47565b60405250565b601f8201601f1916810167ffffffffffffffff81118282101715611da857611da8611d47565b6040525050565b604051610180810167ffffffffffffffff81118282101715611dd357611dd3611d47565b60405290565b5f67ffffffffffffffff821115611df257611df2611d47565b5060051b60200190565b5f82601f830112611e0b575f80fd5b81356020611e1882611dd9565b604051611e258282611d82565b83815260059390931b8501820192828101915086841115611e44575f80fd5b8286015b84811015611e5f5780358352918301918301611e48565b509695505050505050565b5f67ffffffffffffffff821115611e8357611e83611d47565b50601f01601f191660200190565b5f82601f830112611ea0575f80fd5b8135611eab81611e6a565b604051611eb88282611d82565b828152856020848701011115611ecc575f80fd5b826020860160208301375f92810160200192909252509392505050565b5f805f805f60a08688031215611efd575f80fd5b611f0686611a4d565b9450611f1460208701611a4d565b9350604086013567ffffffffffffffff80821115611f30575f80fd5b611f3c89838a01611dfc565b94506060880135915080821115611f51575f80fd5b611f5d89838a01611dfc565b93506080880135915080821115611f72575f80fd5b50611f7f88828901611e91565b9150509295509295909350565b5f805f60408486031215611f9e575f80fd5b611fa784611a4d565b9250602084013567ffffffffffffffff811115611fc2575f80fd5b611fce86828701611b5d565b9497909650939450505050565b5f8060408385031215611fec575f80fd5b823567ffffffffffffffff80821115612003575f80fd5b818501915085601f830112612016575f80fd5b8135602061202382611dd9565b6040516120308282611d82565b83815260059390931b850182019282810191508984111561204f575f80fd5b948201945b838610156120745761206586611a4d565b82529482019490820190612054565b96505086013592505080821115612089575f80fd5b5061209685828601611dfc565b9150509250929050565b5f8151808452602080850194508084015f5b838110156120ce578151875295820195908201906001016120b2565b509495945050505050565b602081525f611ac060208301846120a0565b5f80604083850312156120fc575f80fd5b823567ffffffffffffffff80821115612113575f80fd5b61211f86838701611dfc565b93506020850135915080821115612089575f80fd5b5f805f805f805f806080898b03121561214b575f80fd5b883567ffffffffffffffff80821115612162575f80fd5b61216e8c838d01611c0c565b909a50985060208b0135915080821115612186575f80fd5b6121928c838d01611c0c565b909850965060408b01359150808211156121aa575f80fd5b6121b68c838d01611c0c565b909650945060608b01359150808211156121ce575f80fd5b506121db8b828c01611c0c565b999c989b5096995094979396929594505050565b80151581146111c4575f80fd5b5f806040838503121561220d575f80fd5b61221683611a4d565b91506020830135612226816121ef565b809150509250929050565b5f8060408385031215612242575f80fd5b61224b83611a4d565b915061225960208401611a4d565b90509250929050565b5f805f805f60a08688031215612276575f80fd5b61227f86611a4d565b945061228d60208701611a4d565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122b6575f80fd5b611f7f88828901611e91565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f826122f8576122f86122c2565b500490565b5f8261230b5761230b6122c2565b500690565b600181811c9082168061232457607f821691505b60208210810361119257634e487b7160e01b5f52602260045260245ffd5b5f82601f830112612351575f80fd5b815161235c81611e6a565b6040516123698282611d82565b82815285602084870101111561237d575f80fd5b61238e836020830160208801611ac7565b95945050505050565b805160ff81168114611a63575f80fd5b8051611a63816121ef565b805161ffff81168114611a63575f80fd5b5f608082840312156123d3575f80fd5b6040516080810167ffffffffffffffff82821081831117156123f7576123f7611d47565b81604052829350612407856123b2565b8352612415602086016123b2565b6020840152612426604086016123b2565b6040840152606085015191508082111561243e575f80fd5b5061244b85828601612342565b6060830152505092915050565b5f82601f830112612467575f80fd5b6040805161247481611d5b565b80610800850186811115612486575f80fd5b855b8181101561263357805167ffffffffffffffff808211156124a8575f8081fd5b90880190610180828b0312156124bd575f8081fd5b6124c5611daf565b8251815260206124d68185016123b2565b818301526124e58985016123a7565b89830152606080850151848111156124fc575f8081fd5b6125088e828801612342565b82850152505060808085015184811115612521575f8081fd5b61252d8e828801612342565b82850152505060a08085015184811115612546575f8081fd5b6125528e828801612342565b82850152505060c0808501518481111561256b575f8081fd5b6125778e828801612342565b82850152505060e08085015184811115612590575f8081fd5b61259c8e828801612342565b82850152505061010080850151848111156125b6575f8081fd5b6125c28e828801612342565b82850152505061012080850151848111156125dc575f8081fd5b6125e88e828801612342565b828501525050610140808501518184015250610160808501518481111561260e575f8081fd5b61261a8e8288016123c3565b9184019190915250908652909401935050602001612488565b50919695505050505050565b5f6020828403121561264f575f80fd5b815167ffffffffffffffff80821115612666575f80fd5b90830190610180828603121561267a575f80fd5b612682611daf565b82518152602083015182811115612697575f80fd5b6126a387828601612342565b6020830152506040830151828111156126ba575f80fd5b6126c687828601612342565b6040830152506126d860608401612397565b60608201526126e960808401612397565b60808201526126fa60a08401612397565b60a082015261270b60c08401612397565b60c082015261271c60e08401612397565b60e082015261010061272f8185016123a7565b908201526101206127418482016123a7565b908201526101406127538482016123a7565b90820152610160838101518381111561276a575f80fd5b61277688828701612458565b918301919091525095945050505050565b5f61ffff808351168452806020840151166020850152806040840151166040850152506060820151608060608501526127c36080850182611ae9565b949350505050565b5f826108008101835f5b60408082106127e45750612918565b84840388528251610180815186526020808301516128078289018261ffff169052565b508284015180151588860152506060935083830151828589015261282d83890182611ae9565b9450506080915081830151878503838901526128498582611ae9565b94505060a0915081830151878503838901526128658582611ae9565b94505060c0915081830151878503838901526128818582611ae9565b94505060e09150818301518785038389015261289d8582611ae9565b945050610100915081830151878503838901526128ba8582611ae9565b945050610120915081830151878503838901526128d78582611ae9565b61014085810151908a015261016094850151898203868b015290955093925061290290508484612787565b9a81019a965094909401935050506001016127d5565b509095945050505050565b60208152815160208201525f602083015161018080604085015261294b6101a0850183611ae9565b91506040850151601f19808685030160608701526129698483611ae9565b935060608701519150612981608087018360ff169052565b608087015160ff811660a0880152915060a087015160ff811660c0880152915060c087015160ff811660e0880152915060e087015191506101006129c98188018460ff169052565b87015191506101206129de8782018415159052565b87015191506101406129f38782018415159052565b8701519150610160612a088782018415159052565b870151868503909101838701529050612a2183826127cb565b9695505050505050565b5f60208284031215612a3b575f80fd5b815167ffffffffffffffff811115612a51575f80fd5b6127c384828501612342565b8082028115828204841417610507576105076122d6565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215612a98575f80fd5b611ac082611a4d565b5f60018201612ab257612ab26122d6565b5060010190565b80820180821115610507576105076122d6565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b604081525f612b0c60408301856120a0565b828103602084015261238e81856120a0565b5f6001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612b5560a0830184611ae9565b979650505050505050565b5f60208284031215612b70575f80fd5b8151611ac081611a90565b5f60033d1115612b915760045f803e505f5160e01c5b90565b5f60443d1015612ba15790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612bd157505050505090565b8285019150815181811115612be95750505050505090565b843d8701016020828501011115612c035750505050505090565b61291860208286010187611d82565b5f6001600160a01b03808816835280871660208401525060a06040830152612c3d60a08301866120a0565b8281036060840152612c4f81866120a0565b90508281036080840152612c638185611ae9565b9897505050505050505056fea26469706673582212208f1dec0001dd30a4328452be58dc810cbf520c3cd7e3a40477f8707b3dc8445e64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061016f575f3560e01c806344b285db116100c65780639c095f561161007c578063bd85b03911610057578063bd85b039146103ad578063e985e9c5146103cd578063f242432a146103ee575f80fd5b80639c095f561461035a578063a035b1fe14610379578063a22cb4651461038e575f80fd5b80634e840992116100ac5780634e8409921461031457806368987a831461033357806395d89b4114610346575f80fd5b806344b285db146102c95780634e1273f4146102e8575f80fd5b806318160ddd116101265780632bfc3052116101015780632bfc3052146102845780632eb2c2d6146102975780633f6b5fde146102b6575f80fd5b806318160ddd1461024b57806325431b181461025e578063262fb60814610271575f80fd5b806306fdde031161015657806306fdde03146101ec5780630e89341c1461020d57806310981eb31461022c575f80fd5b8062fdd58e1461018b57806301ffc9a7146101bd575f80fd5b36610187576101853361018061040d565b610463565b005b5f80fd5b348015610196575f80fd5b506101aa6101a5366004611a68565b6104cf565b6040519081526020015b60405180910390f35b3480156101c8575f80fd5b506101dc6101d7366004611aa5565b61050d565b60405190151581526020016101b4565b3480156101f7575f80fd5b506102006105a7565b6040516101b49190611b14565b348015610218575f80fd5b50610200610227366004611b26565b610633565b348015610237575f80fd5b50610185610246366004611b3d565b610726565b348015610256575f80fd5b505f196101aa565b61018561026c366004611ba2565b61074c565b61018561027f366004611c4d565b610773565b610185610292366004611ce0565b610898565b3480156102a2575f80fd5b506101856102b1366004611ee9565b610928565b6101856102c4366004611f8c565b61099d565b3480156102d4575f80fd5b506102006102e3366004611b26565b6109be565b3480156102f3575f80fd5b50610307610302366004611fdb565b610a13565b6040516101b491906120d9565b34801561031f575f80fd5b5061018561032e3660046120eb565b610b4f565b610185610341366004612134565b610b96565b348015610351575f80fd5b50610200610c90565b348015610365575f80fd5b50610185610374366004611b3d565b610c9d565b348015610384575f80fd5b506101aa60035481565b348015610399575f80fd5b506101856103a83660046121fc565b610cc9565b3480156103b8575f80fd5b506101aa6103c7366004611b26565b505f1990565b3480156103d8575f80fd5b506101dc6103e7366004612231565b5f92915050565b3480156103f9575f80fd5b50610185610408366004612262565b610d11565b5f44335a6040516020016104469392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b604051602081830303815290604052805190602001205f1c905090565b5f6003543461047291906122ea565b90505f6003543461048391906122fd565b9050815f036104a5576040516328df225d60e01b815260040160405180910390fd5b6104bf84848460405180602001604052805f815250610d81565b6104c98482610e8c565b50505050565b5f6001600160a01b0383166104e557505f610507565b505f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061056f57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061050757507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610507565b600180546105b490612310565b80601f01602080910402602001604051908101604052809291908181526020018280546105e090612310565b801561062b5780601f106106025761010080835404028352916020019161062b565b820191905f5260205f20905b81548152906001019060200180831161060e57829003601f168201915b505050505081565b606073__$a4848b84e72379aba5877c44e5807844dd$__634afd561b73__$cd35379c437932f1eebc38d0a9c987c3df$__63b4b5b48f856040518263ffffffff1660e01b815260040161068891815260200190565b5f60405180830381865af41580156106a2573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526106c9919081019061263f565b6040518263ffffffff1660e01b81526004016106e59190612923565b5f60405180830381865af41580156106ff573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105079190810190612a2b565b610731338383610f56565b61074833600354836107439190612a5d565b610e8c565b5050565b610756838661109a565b6107608484610463565b61076c84848484611101565b5050505050565b6107ae8282808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b6107e98585808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b146108075760405163b4fa3fb360e01b815260040160405180910390fd5b845f5b8181101561088e5761084d3389898481811061082857610828612a74565b9050602002013588888581811061084157610841612a74565b90506020020135610f56565b6108863361085961040d565b86868581811061086b5761086b612a74565b9050602002013560405180602001604052805f815250610d81565b60010161080a565b5050505050505050565b6108db6108d68383808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b611198565b825f5b81811015610920576109188686838181106108fb576108fb612a74565b90506020020160208101906109109190612a88565b61085961040d565b6001016108de565b505050505050565b6001600160a01b03851633146109905760405162461bcd60e51b815260206004820152602260248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b61076c85858585856111c7565b5f6109a661040d565b90506109b28482610463565b6104c984828585611101565b606073__$cb217de49c6b27d61ef57f519dafde212f$__63929ecd9d73__$cd35379c437932f1eebc38d0a9c987c3df$__63b4b5b48f856040518263ffffffff1660e01b815260040161068891815260200190565b60608151835114610a8c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610987565b5f835167ffffffffffffffff811115610aa757610aa7611d47565b604051908082528060200260200182016040528015610ad0578160200160208202803683370190505b5090505f5b8451811015610b4757610b1a858281518110610af357610af3612a74565b6020026020010151858381518110610b0d57610b0d612a74565b60200260200101516104cf565b828281518110610b2c57610b2c612a74565b6020908102919091010152610b4081612aa1565b9050610ad5565b509392505050565b8051825114610b715760405163b4fa3fb360e01b815260040160405180910390fd5b610b7c338383611417565b61074833600354610b8c8461114d565b6107439190612a5d565b610bd46108d68383808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061114d92505050565b865f5b81811015610c8457610c27868683818110610bf457610bf4612a74565b905060200201358b8b84818110610c0d57610c0d612a74565b9050602002016020810190610c229190612a88565b61109a565b610c7c888883818110610c3c57610c3c612a74565b9050602002016020810190610c519190612a88565b878784818110610c6357610c63612a74565b9050602002013586868581811061086b5761086b612a74565b600101610bd7565b50505050505050505050565b600280546105b490612310565b610ca8338383610f56565b61074833610cb461040d565b8360405180602001604052805f815250610d81565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f20617070726f76616c73206f6e20696e66696e69746965730000000000006044820152606401610987565b6001600160a01b0385163314610d745760405162461bcd60e51b815260206004820152602260248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526132b960f11b6064820152608401610987565b61076c8585858585611628565b6001600160a01b038416610dfd5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610987565b5f838152602081815260408083206001600160a01b0388168452909152812080543392859291610e2e908490612ab9565b909155505060408051858152602081018590526001600160a01b03808816925f92918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461076c815f878787876117a5565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114610ed5576040519150601f19603f3d011682016040523d82523d5f602084013e610eda565b606091505b5050905080610f515760405162461bcd60e51b815260206004820152603160248201527f556e61626c6520746f2073656e642076616c75652c20726563697069656e742060448201527f6d617920686176652072657665727465640000000000000000000000000000006064820152608401610987565b505050565b6001600160a01b038316610fb85760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610987565b5f828152602081815260408083206001600160a01b0387168452909152902054818110156110345760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610987565b5f838152602081815260408083206001600160a01b038816808552908352818420868603905581518781529283018690529133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a450505050565b5f806110a683856104cf565b1190508015816110ca57503373c8f8e2f59dd95ff67c3d39109eca2e2a017d4c8a14155b15610f51576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156104c95782846001600160a01b0316336001600160a01b03167fdd99aef5e4fdfad84059320be40f5dc0f015dc4025f56bd4010608c6743bc22e858560405161108c929190612acc565b5f805b82518110156111925782818151811061116b5761116b612a74565b60200260200101518261117e9190612ab9565b91508061118a81612aa1565b915050611150565b50919050565b6003546111a59082612a5d565b34146111c4576040516328df225d60e01b815260040160405180910390fd5b50565b81518351146112295760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610987565b6001600160a01b03841661128d5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610987565b5f5b83518110156113b1575f8482815181106112ab576112ab612a74565b602002602001015190505f8483815181106112c8576112c8612a74565b6020908102919091018101515f84815280835260408082206001600160a01b038d16835290935291909120549091508181101561135a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610987565b5f838152602081815260408083206001600160a01b038d8116855292528083208585039055908a16825281208054849290611396908490612ab9565b92505081905550505050806113aa90612aa1565b905061128f565b50836001600160a01b0316856001600160a01b0316866001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611401929190612afa565b60405180910390a461076c858686868686611952565b6001600160a01b0383166114795760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610987565b80518251146114db5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610987565b335f5b83518110156115d8575f8482815181106114fa576114fa612a74565b602002602001015190505f84838151811061151757611517612a74565b6020908102919091018101515f84815280835260408082206001600160a01b038c1683529093529190912054909150818110156115a25760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610987565b5f928352602083815260408085206001600160a01b038b16865290915290922091039055806115d081612aa1565b9150506114de565b505f6001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161108c929190612afa565b6001600160a01b03841661168c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610987565b5f838152602081815260408083206001600160a01b03891684529091529020548281101561170f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610987565b5f848152602081815260408083206001600160a01b038a811685529252808320868503905590871682528120805485929061174b908490612ab9565b909155505060408051858152602081018590526001600160a01b03808816929089169182917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109208687878787875b6001600160a01b0384163b156109205760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906117e99089908990889088908890600401612b1e565b6020604051808303815f875af1925050508015611823575060408051601f3d908101601f1916820190925261182091810190612b60565b60015b6118d85761182f612b7b565b806308c379a0036118685750611843612b94565b8061184e575061186a565b8060405162461bcd60e51b81526004016109879190611b14565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610987565b6001600160e01b0319811663f23a6e6160e01b146119495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610987565b50505050505050565b6001600160a01b0384163b156109205760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119969089908990889088908890600401612c12565b6020604051808303815f875af19250505080156119d0575060408051601f3d908101601f191682019092526119cd91810190612b60565b60015b6119dc5761182f612b7b565b6001600160e01b0319811663bc197c8160e01b146119495760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610987565b80356001600160a01b0381168114611a63575f80fd5b919050565b5f8060408385031215611a79575f80fd5b611a8283611a4d565b946020939093013593505050565b6001600160e01b0319811681146111c4575f80fd5b5f60208284031215611ab5575f80fd5b8135611ac081611a90565b9392505050565b5f5b83811015611ae1578181015183820152602001611ac9565b50505f910152565b5f8151808452611b00816020860160208601611ac7565b601f01601f19169290920160200192915050565b602081525f611ac06020830184611ae9565b5f60208284031215611b36575f80fd5b5035919050565b5f8060408385031215611b4e575f80fd5b50508035926020909101359150565b5f8083601f840112611b6d575f80fd5b50813567ffffffffffffffff811115611b84575f80fd5b602083019150836020828501011115611b9b575f80fd5b9250929050565b5f805f805f60808688031215611bb6575f80fd5b611bbf86611a4d565b9450611bcd60208701611a4d565b935060408601359250606086013567ffffffffffffffff811115611bef575f80fd5b611bfb88828901611b5d565b969995985093965092949392505050565b5f8083601f840112611c1c575f80fd5b50813567ffffffffffffffff811115611c33575f80fd5b6020830191508360208260051b8501011115611b9b575f80fd5b5f805f805f8060608789031215611c62575f80fd5b863567ffffffffffffffff80821115611c79575f80fd5b611c858a838b01611c0c565b90985096506020890135915080821115611c9d575f80fd5b611ca98a838b01611c0c565b90965094506040890135915080821115611cc1575f80fd5b50611cce89828a01611c0c565b979a9699509497509295939492505050565b5f805f8060408587031215611cf3575f80fd5b843567ffffffffffffffff80821115611d0a575f80fd5b611d1688838901611c0c565b90965094506020870135915080821115611d2e575f80fd5b50611d3b87828801611c0c565b95989497509550505050565b634e487b7160e01b5f52604160045260245ffd5b610800810181811067ffffffffffffffff82111715611d7c57611d7c611d47565b60405250565b601f8201601f1916810167ffffffffffffffff81118282101715611da857611da8611d47565b6040525050565b604051610180810167ffffffffffffffff81118282101715611dd357611dd3611d47565b60405290565b5f67ffffffffffffffff821115611df257611df2611d47565b5060051b60200190565b5f82601f830112611e0b575f80fd5b81356020611e1882611dd9565b604051611e258282611d82565b83815260059390931b8501820192828101915086841115611e44575f80fd5b8286015b84811015611e5f5780358352918301918301611e48565b509695505050505050565b5f67ffffffffffffffff821115611e8357611e83611d47565b50601f01601f191660200190565b5f82601f830112611ea0575f80fd5b8135611eab81611e6a565b604051611eb88282611d82565b828152856020848701011115611ecc575f80fd5b826020860160208301375f92810160200192909252509392505050565b5f805f805f60a08688031215611efd575f80fd5b611f0686611a4d565b9450611f1460208701611a4d565b9350604086013567ffffffffffffffff80821115611f30575f80fd5b611f3c89838a01611dfc565b94506060880135915080821115611f51575f80fd5b611f5d89838a01611dfc565b93506080880135915080821115611f72575f80fd5b50611f7f88828901611e91565b9150509295509295909350565b5f805f60408486031215611f9e575f80fd5b611fa784611a4d565b9250602084013567ffffffffffffffff811115611fc2575f80fd5b611fce86828701611b5d565b9497909650939450505050565b5f8060408385031215611fec575f80fd5b823567ffffffffffffffff80821115612003575f80fd5b818501915085601f830112612016575f80fd5b8135602061202382611dd9565b6040516120308282611d82565b83815260059390931b850182019282810191508984111561204f575f80fd5b948201945b838610156120745761206586611a4d565b82529482019490820190612054565b96505086013592505080821115612089575f80fd5b5061209685828601611dfc565b9150509250929050565b5f8151808452602080850194508084015f5b838110156120ce578151875295820195908201906001016120b2565b509495945050505050565b602081525f611ac060208301846120a0565b5f80604083850312156120fc575f80fd5b823567ffffffffffffffff80821115612113575f80fd5b61211f86838701611dfc565b93506020850135915080821115612089575f80fd5b5f805f805f805f806080898b03121561214b575f80fd5b883567ffffffffffffffff80821115612162575f80fd5b61216e8c838d01611c0c565b909a50985060208b0135915080821115612186575f80fd5b6121928c838d01611c0c565b909850965060408b01359150808211156121aa575f80fd5b6121b68c838d01611c0c565b909650945060608b01359150808211156121ce575f80fd5b506121db8b828c01611c0c565b999c989b5096995094979396929594505050565b80151581146111c4575f80fd5b5f806040838503121561220d575f80fd5b61221683611a4d565b91506020830135612226816121ef565b809150509250929050565b5f8060408385031215612242575f80fd5b61224b83611a4d565b915061225960208401611a4d565b90509250929050565b5f805f805f60a08688031215612276575f80fd5b61227f86611a4d565b945061228d60208701611a4d565b93506040860135925060608601359150608086013567ffffffffffffffff8111156122b6575f80fd5b611f7f88828901611e91565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f826122f8576122f86122c2565b500490565b5f8261230b5761230b6122c2565b500690565b600181811c9082168061232457607f821691505b60208210810361119257634e487b7160e01b5f52602260045260245ffd5b5f82601f830112612351575f80fd5b815161235c81611e6a565b6040516123698282611d82565b82815285602084870101111561237d575f80fd5b61238e836020830160208801611ac7565b95945050505050565b805160ff81168114611a63575f80fd5b8051611a63816121ef565b805161ffff81168114611a63575f80fd5b5f608082840312156123d3575f80fd5b6040516080810167ffffffffffffffff82821081831117156123f7576123f7611d47565b81604052829350612407856123b2565b8352612415602086016123b2565b6020840152612426604086016123b2565b6040840152606085015191508082111561243e575f80fd5b5061244b85828601612342565b6060830152505092915050565b5f82601f830112612467575f80fd5b6040805161247481611d5b565b80610800850186811115612486575f80fd5b855b8181101561263357805167ffffffffffffffff808211156124a8575f8081fd5b90880190610180828b0312156124bd575f8081fd5b6124c5611daf565b8251815260206124d68185016123b2565b818301526124e58985016123a7565b89830152606080850151848111156124fc575f8081fd5b6125088e828801612342565b82850152505060808085015184811115612521575f8081fd5b61252d8e828801612342565b82850152505060a08085015184811115612546575f8081fd5b6125528e828801612342565b82850152505060c0808501518481111561256b575f8081fd5b6125778e828801612342565b82850152505060e08085015184811115612590575f8081fd5b61259c8e828801612342565b82850152505061010080850151848111156125b6575f8081fd5b6125c28e828801612342565b82850152505061012080850151848111156125dc575f8081fd5b6125e88e828801612342565b828501525050610140808501518184015250610160808501518481111561260e575f8081fd5b61261a8e8288016123c3565b9184019190915250908652909401935050602001612488565b50919695505050505050565b5f6020828403121561264f575f80fd5b815167ffffffffffffffff80821115612666575f80fd5b90830190610180828603121561267a575f80fd5b612682611daf565b82518152602083015182811115612697575f80fd5b6126a387828601612342565b6020830152506040830151828111156126ba575f80fd5b6126c687828601612342565b6040830152506126d860608401612397565b60608201526126e960808401612397565b60808201526126fa60a08401612397565b60a082015261270b60c08401612397565b60c082015261271c60e08401612397565b60e082015261010061272f8185016123a7565b908201526101206127418482016123a7565b908201526101406127538482016123a7565b90820152610160838101518381111561276a575f80fd5b61277688828701612458565b918301919091525095945050505050565b5f61ffff808351168452806020840151166020850152806040840151166040850152506060820151608060608501526127c36080850182611ae9565b949350505050565b5f826108008101835f5b60408082106127e45750612918565b84840388528251610180815186526020808301516128078289018261ffff169052565b508284015180151588860152506060935083830151828589015261282d83890182611ae9565b9450506080915081830151878503838901526128498582611ae9565b94505060a0915081830151878503838901526128658582611ae9565b94505060c0915081830151878503838901526128818582611ae9565b94505060e09150818301518785038389015261289d8582611ae9565b945050610100915081830151878503838901526128ba8582611ae9565b945050610120915081830151878503838901526128d78582611ae9565b61014085810151908a015261016094850151898203868b015290955093925061290290508484612787565b9a81019a965094909401935050506001016127d5565b509095945050505050565b60208152815160208201525f602083015161018080604085015261294b6101a0850183611ae9565b91506040850151601f19808685030160608701526129698483611ae9565b935060608701519150612981608087018360ff169052565b608087015160ff811660a0880152915060a087015160ff811660c0880152915060c087015160ff811660e0880152915060e087015191506101006129c98188018460ff169052565b87015191506101206129de8782018415159052565b87015191506101406129f38782018415159052565b8701519150610160612a088782018415159052565b870151868503909101838701529050612a2183826127cb565b9695505050505050565b5f60208284031215612a3b575f80fd5b815167ffffffffffffffff811115612a51575f80fd5b6127c384828501612342565b8082028115828204841417610507576105076122d6565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215612a98575f80fd5b611ac082611a4d565b5f60018201612ab257612ab26122d6565b5060010190565b80820180821115610507576105076122d6565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b604081525f612b0c60408301856120a0565b828103602084015261238e81856120a0565b5f6001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612b5560a0830184611ae9565b979650505050505050565b5f60208284031215612b70575f80fd5b8151611ac081611a90565b5f60033d1115612b915760045f803e505f5160e01c5b90565b5f60443d1015612ba15790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612bd157505050505090565b8285019150815181811115612be95750505050505090565b843d8701016020828501011115612c035750505050505090565b61291860208286010187611d82565b5f6001600160a01b03808816835280871660208401525060a06040830152612c3d60a08301866120a0565b8281036060840152612c4f81866120a0565b90508281036080840152612c638185611ae9565b9897505050505050505056fea26469706673582212208f1dec0001dd30a4328452be58dc810cbf520c3cd7e3a40477f8707b3dc8445e64736f6c63430008140033",
  "libraries": {
    "InfiniteGenerator": "0xb0047233DE84066b491f093380B8ca3CFf4f7333",
    "InfiniteArt": "0xC6B17CAFcc2439ef4833fe6a073bA71438112f87",
    "InfiniteMetadata": "0x12b7f0E2F3D562b0Cd012bd58E2D620bFdFE542f"
  },
  "devdoc": {
    "author": "Visualize Value",
    "errors": {
      "InvalidToken()": [
        {
          "details": "Custom revert errors."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Message(address,address,uint256,string)": {
        "details": "Emitted when minting a token with a message."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "constructor": {
        "details": "Instanciate the contract..."
      },
      "degenerate(uint256,uint256)": {
        "params": {
          "amount": "The amount to degenerate (withdraws 0.008 ETH per item).",
          "id": "The token ID to destroy."
        }
      },
      "degenerateMany(uint256[],uint256[])": {
        "params": {
          "amounts": "The amounts to degenerate (withdraws 0.008 ETH per item).",
          "ids": "The tokenIDs to destroy."
        }
      },
      "generate(address,string)": {
        "params": {
          "message": "Mint the token with an optional message.",
          "recipient": "The address that should receive the token."
        }
      },
      "generateExisting(address,address,uint256,string)": {
        "params": {
          "message": "Mint the token with an optional message.",
          "recipient": "The address that should receive the token.",
          "source": "The address of an existing owner of the token.",
          "tokenId": "The token ID to mint."
        }
      },
      "generateMany(address[],uint256[])": {
        "params": {
          "amounts": "The number of tokens to send to each recipient.",
          "recipients": "The addresses that should receive the token."
        }
      },
      "generateManyExisting(address[],address[],uint256[],uint256[])": {
        "params": {
          "amounts": "The number of tokens to send for each token.",
          "recipients": "The addresses that should receive the token.",
          "sources": "The addresses of existing owners of each token.",
          "tokenIds": "The tokenIDs to mint."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "regenerate(uint256,uint256)": {
        "params": {
          "amount": "The token amount to burn / recreate.",
          "id": "The token ID to burn."
        }
      },
      "regenerateMany(uint256[],uint256[],uint256[])": {
        "params": {
          "amounts": "The number of tokens per id recreate.",
          "degenerateAmounts": "The number of tokens per id to burn.",
          "ids": "The existing token IDs that should be destroyed in the process."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "svg(uint256)": {
        "params": {
          "tokenId": "The token ID to render."
        }
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The token ID to get metadata for."
        }
      }
    },
    "stateVariables": {
      "VV": {
        "details": "VV creator account."
      }
    },
    "title": "Infinity token contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "degenerate(uint256,uint256)": {
        "notice": "Destroy the token to withdraw its desposited ETH."
      },
      "degenerateMany(uint256[],uint256[])": {
        "notice": "Degenerate multiple tokens at once."
      },
      "generate(address,string)": {
        "notice": "Create a new infinity check and deposit 0.008 ETH for each token."
      },
      "generateExisting(address,address,uint256,string)": {
        "notice": "Copy an existing infinity check owned by someone and deposit 0.008 ETH for each token."
      },
      "generateMany(address[],uint256[])": {
        "notice": "Create multiple infinity check tokens and deposit 0.008 ETH in each."
      },
      "generateManyExisting(address[],address[],uint256[],uint256[])": {
        "notice": "Copy multiple infinity check tokens and deposit 0.008 ETH in each."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Infinities are never approved."
      },
      "name()": {
        "notice": "The name of the collection."
      },
      "price()": {
        "notice": "The price of an infinity token."
      },
      "regenerate(uint256,uint256)": {
        "notice": "Swap an inifinity token for a new one."
      },
      "regenerateMany(uint256[],uint256[],uint256[])": {
        "notice": "Create multiple new infinity check tokens and deposit 0.008 ETH in each."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Infinities are never approved."
      },
      "svg(uint256)": {
        "notice": "Render SVG of the token."
      },
      "symbol()": {
        "notice": "The symbol of the collection."
      },
      "totalSupply()": {
        "notice": "Supply is (in)finite: (2^256 - 1)^2."
      },
      "uri(uint256)": {
        "notice": "Render the encoded token metadata-URI."
      }
    },
    "notice": "Imo notable.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4167,
        "contract": "contracts/Infinity.sol:Infinity",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 626,
        "contract": "contracts/Infinity.sol:Infinity",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 630,
        "contract": "contracts/Infinity.sol:Infinity",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 634,
        "contract": "contracts/Infinity.sol:Infinity",
        "label": "price",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
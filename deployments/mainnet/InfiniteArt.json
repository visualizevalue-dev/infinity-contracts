{
  "address": "0xC6B17CAFcc2439ef4833fe6a073bA71438112f87",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "render180Loop",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "render360Loop",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "render90Loop",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "h",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "s",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "l",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "rendered",
              "type": "string"
            }
          ],
          "internalType": "struct Color",
          "name": "color",
          "type": "tuple"
        }
      ],
      "name": "renderColor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderDefs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderGrid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderGridRow",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "renderInfinityCheck",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "renderInfinityPair",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "renderInfinitySingle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "renderLoop",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "renderNoise",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "renderStyle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "form",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "formWidth",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "isInfinity",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "rotation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stroke",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "center",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "scale",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "width",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "x",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "colorIdx",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "h",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "s",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "l",
                  "type": "uint16"
                },
                {
                  "internalType": "string",
                  "name": "rendered",
                  "type": "string"
                }
              ],
              "internalType": "struct Color",
              "name": "color",
              "type": "tuple"
            }
          ],
          "internalType": "struct Symbol",
          "name": "symbol",
          "type": "tuple"
        }
      ],
      "name": "renderSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "background",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "gridColor",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "alloy",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "grid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "count",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "band",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "gradient",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "continuous",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "mapColors",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "light",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "form",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "formWidth",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "isInfinity",
                  "type": "bool"
                },
                {
                  "internalType": "string",
                  "name": "rotation",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "stroke",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "center",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "scale",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "width",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "x",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "y",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "colorIdx",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "h",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "s",
                      "type": "uint16"
                    },
                    {
                      "internalType": "uint16",
                      "name": "l",
                      "type": "uint16"
                    },
                    {
                      "internalType": "string",
                      "name": "rendered",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Color",
                  "name": "color",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Symbol[64]",
              "name": "symbols",
              "type": "tuple[64]"
            }
          ],
          "internalType": "struct Token",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "renderSymbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "str",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8b5325c66283bf688729660cd8790a89940dc4e35acf4af7a0c8de34163f0ab",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xc8f8e2F59Dd95fF67c3d39109ecA2e2A017D4c8a",
    "contractAddress": null,
    "transactionIndex": 90,
    "gasUsed": "2017324",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x85f448aa87d50e47e1b6c5935ae14083d0c68a846cb90489d469a9ecf64e04d3",
    "transactionHash": "0xf8b5325c66283bf688729660cd8790a89940dc4e35acf4af7a0c8de34163f0ab",
    "logs": [],
    "blockNumber": 17866315,
    "cumulativeGasUsed": "13684044",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c3f378ba41e05b92972639af2d777060",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"render180Loop\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"render360Loop\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"render90Loop\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"renderColor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderDefs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderGrid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderGridRow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"renderInfinityCheck\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"renderInfinityPair\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"renderInfinitySingle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"renderLoop\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"renderNoise\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"renderStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol\",\"name\":\"symbol\",\"type\":\"tuple\"}],\"name\":\"renderSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gridColor\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"alloy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"grid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"band\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"gradient\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"continuous\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mapColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"light\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"form\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"formWidth\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isInfinity\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"rotation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stroke\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"center\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"scale\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorIdx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"h\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"s\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"rendered\",\"type\":\"string\"}],\"internalType\":\"struct Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"internalType\":\"struct Symbol[64]\",\"name\":\"symbols\",\"type\":\"tuple[64]\"}],\"internalType\":\"struct Token\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"renderSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"VisualizeValue\",\"kind\":\"dev\",\"methods\":{\"render180Loop(Symbol)\":{\"details\":\"Render two loop symbols, one rotated by 180 degrees.\"},\"render360Loop(Symbol)\":{\"details\":\"Render four loop symbols to form a square.\"},\"render90Loop(Symbol)\":{\"details\":\"Render two loop symbols, one rotated by 90 degrees.\"},\"renderColor(Color)\":{\"details\":\"Helper to render a color to its SVG compliant HSL string.\"},\"renderDefs()\":{\"details\":\"Render SVG meta defenitions.\"},\"renderGrid()\":{\"details\":\"Generate the SVG code for the entire 8x8 grid.\"},\"renderGridRow()\":{\"details\":\"Generate the SVG code for rows in the 8x8 grid.\"},\"renderInfinityCheck(Symbol)\":{\"details\":\"Quadruple check: Render an infinity check.\"},\"renderInfinityPair(Symbol)\":{\"details\":\"Double check: Render an infinity pair.\"},\"renderInfinitySingle(Symbol)\":{\"details\":\"Check: Render a single infinity.\"},\"renderLoop(Symbol)\":{\"details\":\"Render a single loop symbol.\"},\"renderNoise(Token)\":{\"details\":\"Render the noise layer.\"},\"renderSVG(Token)\":{\"details\":\"Generate the SVG code for an Infinity token.\"},\"renderStyle(Token)\":{\"details\":\"Render CSS variables.\"},\"renderSymbol(Symbol)\":{\"details\":\"Generate SVG code for the symbols.\"},\"renderSymbols(Token)\":{\"details\":\"Generate SVG code for the symbols.\"},\"str(uint256)\":{\"details\":\"Uint to string helper.\"}},\"title\":\"InfiniteArt\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Renders the Infinity visuals.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/InfiniteArt.sol\":\"InfiniteArt\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/libraries/InfiniteArt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./InfiniteBags.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n@title  InfiniteArt\\n@author VisualizeValue\\n@notice Renders the Infinity visuals.\\n*/\\nlibrary InfiniteArt {\\n\\n    /// @dev Generate the SVG code for an Infinity token.\\n    function renderSVG(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<svg viewBox=\\\"0 0 800 800\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                renderStyle(data),\\n                renderDefs(),\\n                '<rect width=\\\"800\\\" height=\\\"800\\\" fill=\\\"var(--bg)\\\" />',\\n                '<g transform=\\\"scale(0.95)\\\" transform-origin=\\\"center\\\">',\\n                    renderGrid(),\\n                '</g>',\\n                renderNoise(data),\\n                '<g transform=\\\"scale(0.95)\\\" transform-origin=\\\"center\\\">',\\n                    renderSymbols(data),\\n                '</g>',\\n            '</svg>'\\n        );\\n    }\\n\\n    /// @dev Render CSS variables.\\n    function renderStyle(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<style>',\\n                ':root {',\\n                    '--bg: ', data.background, ';',\\n                    '--gr: ', data.gridColor, ';',\\n                '}',\\n            '</style>'\\n        );\\n    }\\n\\n    /// @dev Render SVG meta defenitions.\\n    function renderDefs() public pure returns (string memory) {\\n        return string.concat(\\n            '<defs>',\\n                '<rect id=\\\"box\\\" width=\\\"100\\\" height=\\\"100\\\" stroke=\\\"var(--gr)\\\" stroke-width=\\\"3\\\" style=\\\"paint-order: stroke;\\\" />'\\n                '<g id=\\\"row\\\">', renderGridRow(), '</g>',\\n                '<mask id=\\\"mask\\\"><rect width=\\\"800\\\" height=\\\"800\\\" fill=\\\"white\\\"/></mask>',\\n                '<path id=\\\"loop\\\" d=\\\"M 100 0 A 100 100, 0, 1, 1, 0 100 L 0 0 Z\\\"/>',\\n                '<g id=\\\"infinity\\\">',\\n                    '<use href=\\\"#loop\\\" />',\\n                    '<use href=\\\"#loop\\\" transform=\\\"scale(-1,-1)\\\" />',\\n                '</g>',\\n                '<filter id=\\\"noise\\\">',\\n                    '<feTurbulence type=\\\"fractalNoise\\\" baseFrequency=\\\"0.8\\\" stitchTiles=\\\"stitch\\\" numOctaves=\\\"1\\\" seed=\\\"8\\\"/>',\\n                    '<feColorMatrix type=\\\"saturate\\\" values=\\\"0\\\"/>',\\n                '</filter>',\\n            '</defs>'\\n        );\\n    }\\n\\n    /// @dev Generate the SVG code for the entire 8x8 grid.\\n    function renderGrid() public pure returns (string memory) {\\n        string memory grid;\\n        for (uint256 i; i < 8; i++) {\\n            grid = string.concat(\\n                grid,\\n                '<use href=\\\"#row\\\" transform=\\\"translate(0,', str(i*100), ')\\\" />'\\n            );\\n        }\\n\\n        return grid;\\n    }\\n\\n    /// @dev Generate the SVG code for rows in the 8x8 grid.\\n    function renderGridRow() public pure returns (string memory) {\\n        string memory row;\\n        for (uint256 i; i < 8; i++) {\\n            row = string.concat(\\n                row,\\n                '<use transform=\\\"translate(', str(i*100), ')\\\" href=\\\"#box\\\" />'\\n            );\\n        }\\n        return row;\\n    }\\n\\n    /// @dev Render the noise layer.\\n    function renderNoise(Token memory data) public pure returns (string memory) {\\n        return string.concat(\\n            '<rect mask=\\\"url(#mask)\\\" width=\\\"800\\\" height=\\\"800\\\" fill=\\\"black\\\" filter=\\\"url(#noise)\\\" ',\\n                'style=\\\"mix-blend-mode: multiply;\\\" opacity=\\\"', data.light ? '0.248\\\"' : '0.8\\\"',\\n            '/>'\\n        );\\n    }\\n\\n    /// @dev Generate SVG code for the symbols.\\n    function renderSymbols(Token memory data) public pure returns (string memory) {\\n        uint space  = 800 / data.grid;\\n        uint center = space / 4;\\n        uint width  = space / 2;\\n\\n        string memory symbols;\\n        for (uint i = 0; i < data.count; i++) {\\n            Symbol memory symbol = data.symbols[i];\\n\\n            uint baseStroke = symbol.isInfinity ? 8 : 4;\\n            uint stroke = (data.grid < 8 ? baseStroke : baseStroke * 3 / 4) * data.grid / 2;\\n            uint scale  = width * 1000 / symbol.formWidth;\\n\\n            symbol.x      = str(i % data.grid * space + center);\\n            symbol.y      = str(i / data.grid * space + center);\\n            symbol.stroke = str(stroke);\\n            symbol.center = str(center);\\n            symbol.width  = str(width);\\n            symbol.scale  = scale < 1000\\n                ? string.concat('0.', str(scale))\\n                : str(scale / 1000);\\n\\n            symbols = string.concat(symbols, renderSymbol(symbol));\\n        }\\n        return symbols;\\n    }\\n\\n    /// @dev Generate SVG code for the symbols.\\n    function renderSymbol(Symbol memory symbol) public pure returns (string memory) {\\n        symbol.color.rendered = renderColor(symbol.color);\\n\\n        string memory rendered = symbol.form == 1 ? renderLoop(symbol)\\n                               : symbol.form == 2 ? renderInfinitySingle(symbol)\\n                               : symbol.form == 3 ? render90Loop(symbol)\\n                               : symbol.form == 4 ? renderInfinityPair(symbol)\\n                               : symbol.form == 5 ? render180Loop(symbol)\\n                               : symbol.form == 8 ? renderInfinityCheck(symbol)\\n                                                  : render360Loop(symbol);\\n\\n        return string.concat(\\n            '<g transform=\\\"translate(',symbol.x,',',symbol.y,') rotate(',symbol.rotation,')\\\" ',\\n                'transform-origin=\\\"',symbol.center,' ',symbol.center,'\\\" ',\\n                'stroke-width=\\\"', symbol.stroke,\\n            '\\\">',\\n                rendered,\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Helper to render a color to its SVG compliant HSL string.\\n    function renderColor(Color memory color) public pure returns (string memory) {\\n        if (bytes(color.rendered).length > 0) return color.rendered;\\n\\n        return string.concat('hsl(', str(color.h), ' ', str(color.s), '% ', str(color.l), '%)');\\n    }\\n\\n    /// @dev Render a single loop symbol.\\n    function renderLoop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<use href=\\\"#loop\\\" transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\" />'\\n        );\\n    }\\n\\n    /// @dev Render two loop symbols, one rotated by 90 degrees.\\n    function render90Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,0) scale(-1,1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render two loop symbols, one rotated by 180 degrees.\\n    function render180Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,200) scale(-1,-1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render four loop symbols to form a square.\\n    function render360Loop(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<use href=\\\"#loop\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,0) scale(-1,1)\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(0,200) scale(1,-1)\\\" />',\\n                '<use href=\\\"#loop\\\" transform=\\\"translate(200,200) scale(-1,-1)\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Check: Render a single infinity.\\n    function renderInfinitySingle(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Double check: Render an infinity pair.\\n    function renderInfinityPair(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(90)\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Quadruple check: Render an infinity check.\\n    function renderInfinityCheck(Symbol memory symbol) public pure returns (string memory) {\\n        return string.concat(\\n            '<g transform=\\\"scale(', symbol.scale, ')\\\" stroke=\\\"', symbol.color.rendered, '\\\">',\\n                '<g transform=\\\"translate(200,200)\\\">'\\n                    '<use href=\\\"#infinity\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(45)\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(90)\\\" />',\\n                    '<use href=\\\"#infinity\\\" transform=\\\"rotate(135)\\\" />',\\n                '</g>'\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Uint to string helper.\\n    function str(uint n) public pure returns (string memory) {\\n        return Utilities.uint2str(n);\\n    }\\n}\\n\",\"keccak256\":\"0xeb2476fdd33255d1e8358a153be0be4492ee1b26e04a324d7237f0d32484cd0b\",\"license\":\"MIT\"},\"contracts/libraries/InfiniteBags.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n@title  InfiniteBags\\n@author VisualizeValue\\n@notice Bags to hold infinity token data. Imo pretty funny...\\n*/\\n\\n/// @dev Bag holding computed token data.\\nstruct Token {\\n    uint seed;\\n    string background;\\n    string gridColor;\\n    uint8 alloy;\\n    uint8 grid;\\n    uint8 count;\\n    uint8 band;\\n    uint8 gradient;\\n    bool continuous;\\n    bool mapColors;\\n    bool light;\\n    Symbol[64] symbols;\\n}\\n\\n/// @dev Bag holding computed symbol data.\\nstruct Symbol {\\n    uint form;\\n    uint16 formWidth;\\n    bool isInfinity;\\n    string rotation;\\n    string stroke;\\n    string center;\\n    string scale;\\n    string width;\\n    string x;\\n    string y;\\n    uint colorIdx;\\n    Color color;\\n}\\n\\n/// @dev Bag holding color data.\\nstruct Color {\\n    uint16 h;\\n    uint16 s;\\n    uint16 l;\\n    string rendered;\\n}\\n\",\"keccak256\":\"0x9851c0b999d3fcda7c07d9ec496c1902ff46a2334ec29fe50c37b1ffbb0b72c1\",\"license\":\"MIT\"},\"contracts/libraries/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Utilities {\\n    /// @dev Zero-index based pseudorandom number based on one input and max bound\\n    function random(uint256 input, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input))) % _max);\\n    }\\n\\n    /// @dev Zero-index based salted pseudorandom number based on two inputs and max bound\\n    function random(uint256 input, string memory salt, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input, salt))) % _max);\\n    }\\n\\n    /// @dev Convert an integer to a string\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @dev Get the smallest non zero number\\n    function minGt0(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two\\n            ? two > 0\\n                ? two\\n                : one\\n            : one;\\n    }\\n\\n    /// @dev Get the smaller number\\n    function min(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one < two ? one : two;\\n    }\\n\\n    /// @dev Get the larger number\\n    function max(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two ? one : two;\\n    }\\n\\n    /// @dev Get the average between two numbers\\n    function avg(uint8 one, uint8 two) public pure returns (uint8 result) {\\n        unchecked {\\n            result = (one >> 1) + (two >> 1) + (one & two & 1);\\n        }\\n    }\\n\\n    /// @dev Get the days since another date (input is seconds)\\n    function day(uint256 from, uint256 to) public pure returns (uint24) {\\n        return uint24((to - from) / 24 hours + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x529f3946295d83e9961a487a953572220c07f1ab38c53619a5342a3bca957b42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6123a5610035600b8282823980515f1a60731461002957634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610120575f3560e01c806391b5ec22116100b8578063a1830d9c11610088578063a7a7bedf1161006e578063a7a7bedf14610223578063afb2487914610236578063d1a0c97f14610249575f80fd5b8063a1830d9c146101fd578063a1ab7c4d14610210575f80fd5b806391b5ec22146101b1578063929ecd9d146101c45780639bebc962146101d7578063a0ff05eb146101ea575f80fd5b8063200d3b91116100f3578063200d3b911461017b57806322741b01146101835780637251183814610196578063912eff7f146101a9575f80fd5b806303559ab914610124578063183e8705146101425780631917f08f146101555780631a1e9cb314610168575b5f80fd5b61012c61025c565b6040516101399190610918565b60405180910390f35b61012c610150366004610c6f565b61028a565b61012c610163366004610c6f565b6102c2565b61012c610176366004610c6f565b6102e4565b61012c610306565b61012c610191366004610c6f565b61035e565b61012c6101a4366004610ca9565b610380565b61012c610416565b61012c6101bf366004610d5d565b610468565b61012c6101d2366004610d5d565b610485565b61012c6101e5366004610c6f565b6104c6565b61012c6101f8366004610c6f565b6104e8565b61012c61020b366004610d5d565b6105c7565b61012c61021e366004610c6f565b6107cd565b61012c610231366004610ea5565b6107ef565b61012c610244366004610c6f565b610846565b61012c610257366004610d5d565b610868565b6060610266610416565b6040516020016102769190610ef2565b604051602081830303815290604052905090565b60608160c00151826101600151606001516040516020016102ac929190611280565b6040516020818303038152906040529050919050565b60608160c00151826101600151606001516040516020016102ac92919061136d565b60608160c00151826101600151606001516040516020016102ac92919061142b565b6060805f5b600881101561035857816103236101a4836064611513565b60405160200161033492919061152a565b60405160208183030381529060405291508080610350906115d2565b91505061030b565b50919050565b60608160c00151826101600151606001516040516020016102ac9291906115ea565b6040517ff76f950e00000000000000000000000000000000000000000000000000000000815260048101829052606090739a4DCF3Fd4174F8F170F9b31eAf16001529ae6139063f76f950e906024015f60405180830381865af41580156103e9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261041091908101906116c5565b92915050565b6060805f5b600881101561035857816104336101a4836064611513565b604051602001610444929190611737565b60405160208183030381529060405291508080610460906115d2565b91505061041b565b6060816020015182604001516040516020016102ac9291906117b8565b606061049082610468565b61049861025c565b6104a0610306565b6104a985610868565b6104b2866105c7565b6040516020016102ac9594939291906118ff565b60608160c00151826101600151606001516040516020016102ac929190611b04565b60606104f88261016001516107ef565b6101608301516060015281515f9060011461057557825160021461056c57825160031461056357825160041461055a57825160051461055157825160081461054857610543836104c6565b61057e565b610543836107cd565b6105438361035e565b61054383610846565b6105438361028a565b610543836102e4565b61057e836102c2565b610100840151610120850151606086015160a087015160808801516040519596506105b0958291908890602001611c5a565b604051602081830303815290604052915050919050565b60605f826080015160ff166103206105df9190611e14565b61ffff1690505f6105f1600483611e34565b90505f6105ff600284611e34565b905060605f5b8660a0015160ff168110156107c3575f876101600151826040811061062c5761062c611e47565b602002015190505f8160400151610644576004610647565b60085b60808a015160ff91821692505f91600291166008811061067d57600461066e856003611513565b6106789190611e34565b61067f565b835b6106899190611513565b6106939190611e34565b90505f836020015161ffff16876103e86106ad9190611513565b6106b79190611e34565b90506106e5888a8d6080015160ff16886106d19190611e5b565b6106db9190611513565b6101a49190611e6e565b61010085015260808b01516107059089908b906106d19060ff1689611e34565b61012085015261071482610380565b608085015261072288610380565b60a085015261073087610380565b60e08501526103e881106107525761074d6101a46103e883611e34565b61077b565b61075b81610380565b60405160200161076b9190611e81565b6040516020818303038152906040525b60c08501528561078a856104e8565b60405160200161079b929190611ec5565b60405160208183030381529060405295505050505080806107bb906115d2565b915050610605565b5095945050505050565b60608160c00151826101600151606001516040516020016102ac929190611ef3565b606081810151511561080357506060015190565b81516108129061ffff16610380565b610823836020015161ffff16610380565b610834846040015161ffff16610380565b6040516020016102ac93929190612094565b60608160c00151826101600151606001516040516020016102ac929190612161565b60608161014001516108af576040518060400160405280600481526020017f302e3822000000000000000000000000000000000000000000000000000000008152506108e6565b6040518060400160405280600681526020017f302e3234382200000000000000000000000000000000000000000000000000008152505b6040516020016102ac919061226c565b5f5b838110156109105781810151838201526020016108f8565b50505f910152565b602081525f82518060208401526109368160408501602087016108f6565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52604160045260245ffd5b604051610180810167ffffffffffffffff811182821017156109825761098261094a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109b1576109b161094a565b604052919050565b803561ffff811681146109ca575f80fd5b919050565b803580151581146109ca575f80fd5b5f67ffffffffffffffff8211156109f7576109f761094a565b50601f01601f191660200190565b5f82601f830112610a14575f80fd5b8135610a27610a22826109de565b610988565b818152846020838601011115610a3b575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60808284031215610a67575f80fd5b6040516080810167ffffffffffffffff8282108183111715610a8b57610a8b61094a565b81604052829350610a9b856109b9565b8352610aa9602086016109b9565b6020840152610aba604086016109b9565b60408401526060850135915080821115610ad2575f80fd5b50610adf85828601610a05565b6060830152505092915050565b5f6101808284031215610afd575f80fd5b610b0561095e565b905081358152610b17602083016109b9565b6020820152610b28604083016109cf565b6040820152606082013567ffffffffffffffff80821115610b47575f80fd5b610b5385838601610a05565b60608401526080840135915080821115610b6b575f80fd5b610b7785838601610a05565b608084015260a0840135915080821115610b8f575f80fd5b610b9b85838601610a05565b60a084015260c0840135915080821115610bb3575f80fd5b610bbf85838601610a05565b60c084015260e0840135915080821115610bd7575f80fd5b610be385838601610a05565b60e084015261010091508184013581811115610bfd575f80fd5b610c0986828701610a05565b838501525061012091508184013581811115610c23575f80fd5b610c2f86828701610a05565b83850152506101409150818401358284015261016091508184013581811115610c56575f80fd5b610c6286828701610a57565b8385015250505092915050565b5f60208284031215610c7f575f80fd5b813567ffffffffffffffff811115610c95575f80fd5b610ca184828501610aec565b949350505050565b5f60208284031215610cb9575f80fd5b5035919050565b803560ff811681146109ca575f80fd5b5f82601f830112610cdf575f80fd5b60405161080080820167ffffffffffffffff8382108183111715610d0557610d0561094a565b81604052839150828601925086831115610d1d575f80fd5b855b83811015610d5157803582811115610d36575f8081fd5b610d4289828a01610aec565b84525060209283019201610d1f565b50929695505050505050565b5f60208284031215610d6d575f80fd5b813567ffffffffffffffff80821115610d84575f80fd5b908301906101808286031215610d98575f80fd5b610da061095e565b82358152602083013582811115610db5575f80fd5b610dc187828601610a05565b602083015250604083013582811115610dd8575f80fd5b610de487828601610a05565b604083015250610df660608401610cc0565b6060820152610e0760808401610cc0565b6080820152610e1860a08401610cc0565b60a0820152610e2960c08401610cc0565b60c0820152610e3a60e08401610cc0565b60e0820152610100610e4d8185016109cf565b90820152610120610e5f8482016109cf565b90820152610140610e718482016109cf565b908201526101608381013583811115610e88575f80fd5b610e9488828701610cd0565b918301919091525095945050505050565b5f60208284031215610eb5575f80fd5b813567ffffffffffffffff811115610ecb575f80fd5b610ca184828501610a57565b5f8151610ee88185602086016108f6565b9290920192915050565b7f3c646566733e000000000000000000000000000000000000000000000000000081527f3c726563742069643d22626f78222077696474683d223130302220686569676860068201527f743d2231303022207374726f6b653d22766172282d2d67722922207374726f6b60268201527f652d77696474683d223322207374796c653d227061696e742d6f726465723a2060468201527f7374726f6b653b22202f3e3c672069643d22726f77223e00000000000000000060668201525f610fbb607d830184610ed7565b631e17b39f60e11b8082527f3c6d61736b2069643d226d61736b223e3c726563742077696474683d2238303060048301527f22206865696768743d22383030222066696c6c3d227768697465222f3e3c2f6d60248301527f61736b3e0000000000000000000000000000000000000000000000000000000060448301527f3c706174682069643d226c6f6f702220643d224d20313030203020412031303060488301527f203130302c20302c20312c20312c203020313030204c20302030205a222f3e0060688301527f3c672069643d22696e66696e697479223e0000000000000000000000000000006087830152731e3ab9b290343932b31e9111b637b7b81110179f60611b60988301527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2273636160ac8301527f6c65282d312c2d312922202f3e0000000000000000000000000000000000000060cc83015260d98201527f3c66696c7465722069643d226e6f697365223e0000000000000000000000000060dd8201527f3c666554757262756c656e636520747970653d226672616374616c4e6f69736560f08201527f2220626173654672657175656e63793d22302e38222073746974636854696c656101108201527f733d2273746974636822206e756d4f6374617665733d22312220736565643d226101308201527f38222f3e000000000000000000000000000000000000000000000000000000006101508201527f3c6665436f6c6f724d617472697820747970653d2273617475726174652220766101548201527f616c7565733d2230222f3e0000000000000000000000000000000000000000006101748201527f3c2f66696c7465723e000000000000000000000000000000000000000000000061017f8201527f3c2f646566733e0000000000000000000000000000000000000000000000000061018882015261018f019392505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f83516112ae8160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b60149184019182015283516112d981601f8401602088016108f6565b61111f60f11b9101601f810191909152731e3ab9b290343932b31e9111b637b7b81110179f60611b60218201527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2274726160358201527f6e736c617465283230302c3029207363616c65282d312c312922202f3e0000006055820152607281015b631e17b39f60e11b815260040195945050505050565b7f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2273636181527f6c6528000000000000000000000000000000000000000000000000000000000060208201525f83516113ca8160238501602088016108f6565b6a14911039ba3937b5b29e9160a91b60239184019182015283516113f581602e8401602088016108f6565b7f22202f3e00000000000000000000000000000000000000000000000000000000602e9290910191820152603201949350505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f83516114598160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b601491840191820152835161148481601f8401602088016108f6565b61111f60f11b9101601f8101919091527f3c67207472616e73666f726d3d227472616e736c617465283230302c3230302960218201527f223e3c75736520687265663d2223696e66696e69747922202f3e0000000000006041820152605b81015b671e17b39f1e17b39f60c11b815260080195945050505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610410576104106114ff565b5f835161153b8184602088016108f6565b80830190507f3c75736520687265663d2223726f7722207472616e73666f726d3d227472616e81527f736c61746528302c0000000000000000000000000000000000000000000000006020820152835161159c8160288401602088016108f6565b7f2922202f3e00000000000000000000000000000000000000000000000000000060289290910191820152602d01949350505050565b5f600182016115e3576115e36114ff565b5060010190565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f83516116188160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b601491840191820152835161164381601f8401602088016108f6565b61111f60f11b9101601f810191909152731e3ab9b290343932b31e9111b637b7b81110179f60611b60218201527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2274726160358201527f6e736c617465283230302c32303029207363616c65282d312c2d312922202f3e605582015260758101611357565b5f602082840312156116d5575f80fd5b815167ffffffffffffffff8111156116eb575f80fd5b8201601f810184136116fb575f80fd5b8051611709610a22826109de565b81815285602083850101111561171d575f80fd5b61172e8260208301602086016108f6565b95945050505050565b5f83516117488184602088016108f6565b7f3c757365207472616e73666f726d3d227472616e736c61746528000000000000908301908152835161178281601a8401602088016108f6565b7f292220687265663d2223626f7822202f3e000000000000000000000000000000601a9290910191820152602b01949350505050565b7f3c7374796c653e0000000000000000000000000000000000000000000000000081527f3a726f6f74207b0000000000000000000000000000000000000000000000000060078201527f2d2d62673a200000000000000000000000000000000000000000000000000000600e8201525f835161183b8160148501602088016108f6565b80830190507f3b000000000000000000000000000000000000000000000000000000000000008060148301527f2d2d67723a200000000000000000000000000000000000000000000000000000601583015284516118a081601b8501602089016108f6565b601b9201918201527f7d00000000000000000000000000000000000000000000000000000000000000601c8201527f3c2f7374796c653e000000000000000000000000000000000000000000000000601d820152602501949350505050565b7f3c7376672076696577426f783d223020302038303020383030222066696c6c3d81527f226e6f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f60208201527f323030302f737667223e0000000000000000000000000000000000000000000060408201525f865161198281604a850160208b016108f6565b86519083019061199981604a840160208b016108f6565b7f3c726563742077696474683d2238303022206865696768743d223830302220669101604a8101919091527f696c6c3d22766172282d2d62672922202f3e0000000000000000000000000000606a8201527f3c67207472616e73666f726d3d227363616c6528302e39352922207472616e73607c8201527f666f726d2d6f726967696e3d2263656e746572223e0000000000000000000000609c82015260b1810190508551611a4c818360208a016108f6565b01611a5d81631e17b39f60e11b9052565b611ac5611abf611a706004840188610ed7565b7f3c67207472616e73666f726d3d227363616c6528302e39352922207472616e7381527f666f726d2d6f726967696e3d2263656e746572223e0000000000000000000000602082015260350190565b85610ed7565b631e17b39f60e11b81527f3c2f7376673e00000000000000000000000000000000000000000000000000006004820152600a0198975050505050505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f8351611b328160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b6014918401918201528351611b5d81601f8401602088016108f6565b61111f60f11b9101601f810191909152731e3ab9b290343932b31e9111b637b7b81110179f60611b60218201527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2274726160358201527f6e736c617465283230302c3029207363616c65282d312c312922202f3e0000006055820152607281017f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d227472618082527f6e736c61746528302c32303029207363616c6528312c2d312922202f3e0000006020830152603d8201527f6e736c617465283230302c32303029207363616c65282d312c2d312922202f3e605d8201529050607d8101611357565b7f3c67207472616e73666f726d3d227472616e736c61746528000000000000000081525f8851611c91816018850160208d016108f6565b7f2c000000000000000000000000000000000000000000000000000000000000006018918401918201528851611cce816019840160208d016108f6565b01611cfb601982017f2920726f746174652800000000000000000000000000000000000000000000009052565b611d086022820189610ed7565b7f2922200000000000000000000000000000000000000000000000000000000000815290507f7472616e73666f726d2d6f726967696e3d2200000000000000000000000000006003820152611d606015820188610ed7565b600160fd1b81529050611d766001820187610ed7565b7f2220000000000000000000000000000000000000000000000000000000000000815290507f7374726f6b652d77696474683d220000000000000000000000000000000000006002820152611dce6010820186610ed7565b61111f60f11b81529050611de56002820185610ed7565b631e17b39f60e11b81526004019a9950505050505050505050565b634e487b7160e01b5f52601260045260245ffd5b5f61ffff80841680611e2857611e28611e00565b92169190910492915050565b5f82611e4257611e42611e00565b500490565b634e487b7160e01b5f52603260045260245ffd5b5f82611e6957611e69611e00565b500690565b80820180821115610410576104106114ff565b7f302e00000000000000000000000000000000000000000000000000000000000081525f8251611eb88160028501602087016108f6565b9190910160020192915050565b5f8351611ed68184602088016108f6565b835190830190611eea8183602088016108f6565b01949350505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f8351611f218160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b6014918401918201528351611f4c81601f8401602088016108f6565b61111f60f11b9101601f8101919091527f3c67207472616e73666f726d3d227472616e736c617465283230302c3230302960218201527f223e3c75736520687265663d2223696e66696e69747922202f3e0000000000006041820152605b810190507f3c75736520687265663d2223696e66696e69747922207472616e73666f726d3d8082527f22726f746174652834352922202f3e0000000000000000000000000000000000602083015261204e602f83017f3c75736520687265663d2223696e66696e69747922207472616e73666f726d3d81527f22726f746174652839302922202f3e00000000000000000000000000000000006020820152602f0190565b9081527f22726f74617465283133352922202f3e000000000000000000000000000000006020820152671e17b39f1e17b39f60c11b603082015260380195945050505050565b7f68736c280000000000000000000000000000000000000000000000000000000081525f84516120cb8160048501602089016108f6565b600160fd1b60049184019182015284516120ec8160058401602089016108f6565b7f252000000000000000000000000000000000000000000000000000000000000060059290910191820152835161212a8160078401602088016108f6565b7f25290000000000000000000000000000000000000000000000000000000000006007929091019182015260090195945050505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f835161218f8160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b60149184019182015283516121ba81601f8401602088016108f6565b61111f60f11b9101601f8101919091527f3c67207472616e73666f726d3d227472616e736c617465283230302c3230302960218201527f223e3c75736520687265663d2223696e66696e69747922202f3e00000000000060418201526114e5605b82017f3c75736520687265663d2223696e66696e69747922207472616e73666f726d3d81527f22726f746174652839302922202f3e00000000000000000000000000000000006020820152602f0190565b7f3c72656374206d61736b3d2275726c28236d61736b29222077696474683d223881527f303022206865696768743d22383030222066696c6c3d22626c61636b2220666960208201527f6c7465723d2275726c28236e6f6973652922200000000000000000000000000060408201527f7374796c653d226d69782d626c656e642d6d6f64653a206d756c7469706c793b60538201527f22206f7061636974793d2200000000000000000000000000000000000000000060738201525f825161233b81607e8501602087016108f6565b7f2f3e000000000000000000000000000000000000000000000000000000000000607e93909101928301525060800191905056fea264697066735822122062a3373d80bf07174fca242b34d0e797e79746ffc2d024aaec27f94b48639f1164736f6c63430008140033",
  "deployedBytecode": "0x7300000000000000000000000000000000000000003014608060405260043610610120575f3560e01c806391b5ec22116100b8578063a1830d9c11610088578063a7a7bedf1161006e578063a7a7bedf14610223578063afb2487914610236578063d1a0c97f14610249575f80fd5b8063a1830d9c146101fd578063a1ab7c4d14610210575f80fd5b806391b5ec22146101b1578063929ecd9d146101c45780639bebc962146101d7578063a0ff05eb146101ea575f80fd5b8063200d3b91116100f3578063200d3b911461017b57806322741b01146101835780637251183814610196578063912eff7f146101a9575f80fd5b806303559ab914610124578063183e8705146101425780631917f08f146101555780631a1e9cb314610168575b5f80fd5b61012c61025c565b6040516101399190610918565b60405180910390f35b61012c610150366004610c6f565b61028a565b61012c610163366004610c6f565b6102c2565b61012c610176366004610c6f565b6102e4565b61012c610306565b61012c610191366004610c6f565b61035e565b61012c6101a4366004610ca9565b610380565b61012c610416565b61012c6101bf366004610d5d565b610468565b61012c6101d2366004610d5d565b610485565b61012c6101e5366004610c6f565b6104c6565b61012c6101f8366004610c6f565b6104e8565b61012c61020b366004610d5d565b6105c7565b61012c61021e366004610c6f565b6107cd565b61012c610231366004610ea5565b6107ef565b61012c610244366004610c6f565b610846565b61012c610257366004610d5d565b610868565b6060610266610416565b6040516020016102769190610ef2565b604051602081830303815290604052905090565b60608160c00151826101600151606001516040516020016102ac929190611280565b6040516020818303038152906040529050919050565b60608160c00151826101600151606001516040516020016102ac92919061136d565b60608160c00151826101600151606001516040516020016102ac92919061142b565b6060805f5b600881101561035857816103236101a4836064611513565b60405160200161033492919061152a565b60405160208183030381529060405291508080610350906115d2565b91505061030b565b50919050565b60608160c00151826101600151606001516040516020016102ac9291906115ea565b6040517ff76f950e0000000000000000000000000000000000000000000000000000000081526004810182905260609073__$bd654521c54dee0917bb5ce7a9c0751ede$__9063f76f950e906024015f60405180830381865af41580156103e9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261041091908101906116c5565b92915050565b6060805f5b600881101561035857816104336101a4836064611513565b604051602001610444929190611737565b60405160208183030381529060405291508080610460906115d2565b91505061041b565b6060816020015182604001516040516020016102ac9291906117b8565b606061049082610468565b61049861025c565b6104a0610306565b6104a985610868565b6104b2866105c7565b6040516020016102ac9594939291906118ff565b60608160c00151826101600151606001516040516020016102ac929190611b04565b60606104f88261016001516107ef565b6101608301516060015281515f9060011461057557825160021461056c57825160031461056357825160041461055a57825160051461055157825160081461054857610543836104c6565b61057e565b610543836107cd565b6105438361035e565b61054383610846565b6105438361028a565b610543836102e4565b61057e836102c2565b610100840151610120850151606086015160a087015160808801516040519596506105b0958291908890602001611c5a565b604051602081830303815290604052915050919050565b60605f826080015160ff166103206105df9190611e14565b61ffff1690505f6105f1600483611e34565b90505f6105ff600284611e34565b905060605f5b8660a0015160ff168110156107c3575f876101600151826040811061062c5761062c611e47565b602002015190505f8160400151610644576004610647565b60085b60808a015160ff91821692505f91600291166008811061067d57600461066e856003611513565b6106789190611e34565b61067f565b835b6106899190611513565b6106939190611e34565b90505f836020015161ffff16876103e86106ad9190611513565b6106b79190611e34565b90506106e5888a8d6080015160ff16886106d19190611e5b565b6106db9190611513565b6101a49190611e6e565b61010085015260808b01516107059089908b906106d19060ff1689611e34565b61012085015261071482610380565b608085015261072288610380565b60a085015261073087610380565b60e08501526103e881106107525761074d6101a46103e883611e34565b61077b565b61075b81610380565b60405160200161076b9190611e81565b6040516020818303038152906040525b60c08501528561078a856104e8565b60405160200161079b929190611ec5565b60405160208183030381529060405295505050505080806107bb906115d2565b915050610605565b5095945050505050565b60608160c00151826101600151606001516040516020016102ac929190611ef3565b606081810151511561080357506060015190565b81516108129061ffff16610380565b610823836020015161ffff16610380565b610834846040015161ffff16610380565b6040516020016102ac93929190612094565b60608160c00151826101600151606001516040516020016102ac929190612161565b60608161014001516108af576040518060400160405280600481526020017f302e3822000000000000000000000000000000000000000000000000000000008152506108e6565b6040518060400160405280600681526020017f302e3234382200000000000000000000000000000000000000000000000000008152505b6040516020016102ac919061226c565b5f5b838110156109105781810151838201526020016108f8565b50505f910152565b602081525f82518060208401526109368160408501602087016108f6565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52604160045260245ffd5b604051610180810167ffffffffffffffff811182821017156109825761098261094a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156109b1576109b161094a565b604052919050565b803561ffff811681146109ca575f80fd5b919050565b803580151581146109ca575f80fd5b5f67ffffffffffffffff8211156109f7576109f761094a565b50601f01601f191660200190565b5f82601f830112610a14575f80fd5b8135610a27610a22826109de565b610988565b818152846020838601011115610a3b575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60808284031215610a67575f80fd5b6040516080810167ffffffffffffffff8282108183111715610a8b57610a8b61094a565b81604052829350610a9b856109b9565b8352610aa9602086016109b9565b6020840152610aba604086016109b9565b60408401526060850135915080821115610ad2575f80fd5b50610adf85828601610a05565b6060830152505092915050565b5f6101808284031215610afd575f80fd5b610b0561095e565b905081358152610b17602083016109b9565b6020820152610b28604083016109cf565b6040820152606082013567ffffffffffffffff80821115610b47575f80fd5b610b5385838601610a05565b60608401526080840135915080821115610b6b575f80fd5b610b7785838601610a05565b608084015260a0840135915080821115610b8f575f80fd5b610b9b85838601610a05565b60a084015260c0840135915080821115610bb3575f80fd5b610bbf85838601610a05565b60c084015260e0840135915080821115610bd7575f80fd5b610be385838601610a05565b60e084015261010091508184013581811115610bfd575f80fd5b610c0986828701610a05565b838501525061012091508184013581811115610c23575f80fd5b610c2f86828701610a05565b83850152506101409150818401358284015261016091508184013581811115610c56575f80fd5b610c6286828701610a57565b8385015250505092915050565b5f60208284031215610c7f575f80fd5b813567ffffffffffffffff811115610c95575f80fd5b610ca184828501610aec565b949350505050565b5f60208284031215610cb9575f80fd5b5035919050565b803560ff811681146109ca575f80fd5b5f82601f830112610cdf575f80fd5b60405161080080820167ffffffffffffffff8382108183111715610d0557610d0561094a565b81604052839150828601925086831115610d1d575f80fd5b855b83811015610d5157803582811115610d36575f8081fd5b610d4289828a01610aec565b84525060209283019201610d1f565b50929695505050505050565b5f60208284031215610d6d575f80fd5b813567ffffffffffffffff80821115610d84575f80fd5b908301906101808286031215610d98575f80fd5b610da061095e565b82358152602083013582811115610db5575f80fd5b610dc187828601610a05565b602083015250604083013582811115610dd8575f80fd5b610de487828601610a05565b604083015250610df660608401610cc0565b6060820152610e0760808401610cc0565b6080820152610e1860a08401610cc0565b60a0820152610e2960c08401610cc0565b60c0820152610e3a60e08401610cc0565b60e0820152610100610e4d8185016109cf565b90820152610120610e5f8482016109cf565b90820152610140610e718482016109cf565b908201526101608381013583811115610e88575f80fd5b610e9488828701610cd0565b918301919091525095945050505050565b5f60208284031215610eb5575f80fd5b813567ffffffffffffffff811115610ecb575f80fd5b610ca184828501610a57565b5f8151610ee88185602086016108f6565b9290920192915050565b7f3c646566733e000000000000000000000000000000000000000000000000000081527f3c726563742069643d22626f78222077696474683d223130302220686569676860068201527f743d2231303022207374726f6b653d22766172282d2d67722922207374726f6b60268201527f652d77696474683d223322207374796c653d227061696e742d6f726465723a2060468201527f7374726f6b653b22202f3e3c672069643d22726f77223e00000000000000000060668201525f610fbb607d830184610ed7565b631e17b39f60e11b8082527f3c6d61736b2069643d226d61736b223e3c726563742077696474683d2238303060048301527f22206865696768743d22383030222066696c6c3d227768697465222f3e3c2f6d60248301527f61736b3e0000000000000000000000000000000000000000000000000000000060448301527f3c706174682069643d226c6f6f702220643d224d20313030203020412031303060488301527f203130302c20302c20312c20312c203020313030204c20302030205a222f3e0060688301527f3c672069643d22696e66696e697479223e0000000000000000000000000000006087830152731e3ab9b290343932b31e9111b637b7b81110179f60611b60988301527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2273636160ac8301527f6c65282d312c2d312922202f3e0000000000000000000000000000000000000060cc83015260d98201527f3c66696c7465722069643d226e6f697365223e0000000000000000000000000060dd8201527f3c666554757262756c656e636520747970653d226672616374616c4e6f69736560f08201527f2220626173654672657175656e63793d22302e38222073746974636854696c656101108201527f733d2273746974636822206e756d4f6374617665733d22312220736565643d226101308201527f38222f3e000000000000000000000000000000000000000000000000000000006101508201527f3c6665436f6c6f724d617472697820747970653d2273617475726174652220766101548201527f616c7565733d2230222f3e0000000000000000000000000000000000000000006101748201527f3c2f66696c7465723e000000000000000000000000000000000000000000000061017f8201527f3c2f646566733e0000000000000000000000000000000000000000000000000061018882015261018f019392505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f83516112ae8160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b60149184019182015283516112d981601f8401602088016108f6565b61111f60f11b9101601f810191909152731e3ab9b290343932b31e9111b637b7b81110179f60611b60218201527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2274726160358201527f6e736c617465283230302c3029207363616c65282d312c312922202f3e0000006055820152607281015b631e17b39f60e11b815260040195945050505050565b7f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2273636181527f6c6528000000000000000000000000000000000000000000000000000000000060208201525f83516113ca8160238501602088016108f6565b6a14911039ba3937b5b29e9160a91b60239184019182015283516113f581602e8401602088016108f6565b7f22202f3e00000000000000000000000000000000000000000000000000000000602e9290910191820152603201949350505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f83516114598160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b601491840191820152835161148481601f8401602088016108f6565b61111f60f11b9101601f8101919091527f3c67207472616e73666f726d3d227472616e736c617465283230302c3230302960218201527f223e3c75736520687265663d2223696e66696e69747922202f3e0000000000006041820152605b81015b671e17b39f1e17b39f60c11b815260080195945050505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610410576104106114ff565b5f835161153b8184602088016108f6565b80830190507f3c75736520687265663d2223726f7722207472616e73666f726d3d227472616e81527f736c61746528302c0000000000000000000000000000000000000000000000006020820152835161159c8160288401602088016108f6565b7f2922202f3e00000000000000000000000000000000000000000000000000000060289290910191820152602d01949350505050565b5f600182016115e3576115e36114ff565b5060010190565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f83516116188160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b601491840191820152835161164381601f8401602088016108f6565b61111f60f11b9101601f810191909152731e3ab9b290343932b31e9111b637b7b81110179f60611b60218201527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2274726160358201527f6e736c617465283230302c32303029207363616c65282d312c2d312922202f3e605582015260758101611357565b5f602082840312156116d5575f80fd5b815167ffffffffffffffff8111156116eb575f80fd5b8201601f810184136116fb575f80fd5b8051611709610a22826109de565b81815285602083850101111561171d575f80fd5b61172e8260208301602086016108f6565b95945050505050565b5f83516117488184602088016108f6565b7f3c757365207472616e73666f726d3d227472616e736c61746528000000000000908301908152835161178281601a8401602088016108f6565b7f292220687265663d2223626f7822202f3e000000000000000000000000000000601a9290910191820152602b01949350505050565b7f3c7374796c653e0000000000000000000000000000000000000000000000000081527f3a726f6f74207b0000000000000000000000000000000000000000000000000060078201527f2d2d62673a200000000000000000000000000000000000000000000000000000600e8201525f835161183b8160148501602088016108f6565b80830190507f3b000000000000000000000000000000000000000000000000000000000000008060148301527f2d2d67723a200000000000000000000000000000000000000000000000000000601583015284516118a081601b8501602089016108f6565b601b9201918201527f7d00000000000000000000000000000000000000000000000000000000000000601c8201527f3c2f7374796c653e000000000000000000000000000000000000000000000000601d820152602501949350505050565b7f3c7376672076696577426f783d223020302038303020383030222066696c6c3d81527f226e6f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f60208201527f323030302f737667223e0000000000000000000000000000000000000000000060408201525f865161198281604a850160208b016108f6565b86519083019061199981604a840160208b016108f6565b7f3c726563742077696474683d2238303022206865696768743d223830302220669101604a8101919091527f696c6c3d22766172282d2d62672922202f3e0000000000000000000000000000606a8201527f3c67207472616e73666f726d3d227363616c6528302e39352922207472616e73607c8201527f666f726d2d6f726967696e3d2263656e746572223e0000000000000000000000609c82015260b1810190508551611a4c818360208a016108f6565b01611a5d81631e17b39f60e11b9052565b611ac5611abf611a706004840188610ed7565b7f3c67207472616e73666f726d3d227363616c6528302e39352922207472616e7381527f666f726d2d6f726967696e3d2263656e746572223e0000000000000000000000602082015260350190565b85610ed7565b631e17b39f60e11b81527f3c2f7376673e00000000000000000000000000000000000000000000000000006004820152600a0198975050505050505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f8351611b328160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b6014918401918201528351611b5d81601f8401602088016108f6565b61111f60f11b9101601f810191909152731e3ab9b290343932b31e9111b637b7b81110179f60611b60218201527f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d2274726160358201527f6e736c617465283230302c3029207363616c65282d312c312922202f3e0000006055820152607281017f3c75736520687265663d22236c6f6f7022207472616e73666f726d3d227472618082527f6e736c61746528302c32303029207363616c6528312c2d312922202f3e0000006020830152603d8201527f6e736c617465283230302c32303029207363616c65282d312c2d312922202f3e605d8201529050607d8101611357565b7f3c67207472616e73666f726d3d227472616e736c61746528000000000000000081525f8851611c91816018850160208d016108f6565b7f2c000000000000000000000000000000000000000000000000000000000000006018918401918201528851611cce816019840160208d016108f6565b01611cfb601982017f2920726f746174652800000000000000000000000000000000000000000000009052565b611d086022820189610ed7565b7f2922200000000000000000000000000000000000000000000000000000000000815290507f7472616e73666f726d2d6f726967696e3d2200000000000000000000000000006003820152611d606015820188610ed7565b600160fd1b81529050611d766001820187610ed7565b7f2220000000000000000000000000000000000000000000000000000000000000815290507f7374726f6b652d77696474683d220000000000000000000000000000000000006002820152611dce6010820186610ed7565b61111f60f11b81529050611de56002820185610ed7565b631e17b39f60e11b81526004019a9950505050505050505050565b634e487b7160e01b5f52601260045260245ffd5b5f61ffff80841680611e2857611e28611e00565b92169190910492915050565b5f82611e4257611e42611e00565b500490565b634e487b7160e01b5f52603260045260245ffd5b5f82611e6957611e69611e00565b500690565b80820180821115610410576104106114ff565b7f302e00000000000000000000000000000000000000000000000000000000000081525f8251611eb88160028501602087016108f6565b9190910160020192915050565b5f8351611ed68184602088016108f6565b835190830190611eea8183602088016108f6565b01949350505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f8351611f218160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b6014918401918201528351611f4c81601f8401602088016108f6565b61111f60f11b9101601f8101919091527f3c67207472616e73666f726d3d227472616e736c617465283230302c3230302960218201527f223e3c75736520687265663d2223696e66696e69747922202f3e0000000000006041820152605b810190507f3c75736520687265663d2223696e66696e69747922207472616e73666f726d3d8082527f22726f746174652834352922202f3e0000000000000000000000000000000000602083015261204e602f83017f3c75736520687265663d2223696e66696e69747922207472616e73666f726d3d81527f22726f746174652839302922202f3e00000000000000000000000000000000006020820152602f0190565b9081527f22726f74617465283133352922202f3e000000000000000000000000000000006020820152671e17b39f1e17b39f60c11b603082015260380195945050505050565b7f68736c280000000000000000000000000000000000000000000000000000000081525f84516120cb8160048501602089016108f6565b600160fd1b60049184019182015284516120ec8160058401602089016108f6565b7f252000000000000000000000000000000000000000000000000000000000000060059290910191820152835161212a8160078401602088016108f6565b7f25290000000000000000000000000000000000000000000000000000000000006007929091019182015260090195945050505050565b73078ce40e8e4c2dce6ccdee4da7a44e6c6c2d8ca560631b81525f835161218f8160148501602088016108f6565b6a14911039ba3937b5b29e9160a91b60149184019182015283516121ba81601f8401602088016108f6565b61111f60f11b9101601f8101919091527f3c67207472616e73666f726d3d227472616e736c617465283230302c3230302960218201527f223e3c75736520687265663d2223696e66696e69747922202f3e00000000000060418201526114e5605b82017f3c75736520687265663d2223696e66696e69747922207472616e73666f726d3d81527f22726f746174652839302922202f3e00000000000000000000000000000000006020820152602f0190565b7f3c72656374206d61736b3d2275726c28236d61736b29222077696474683d223881527f303022206865696768743d22383030222066696c6c3d22626c61636b2220666960208201527f6c7465723d2275726c28236e6f6973652922200000000000000000000000000060408201527f7374796c653d226d69782d626c656e642d6d6f64653a206d756c7469706c793b60538201527f22206f7061636974793d2200000000000000000000000000000000000000000060738201525f825161233b81607e8501602087016108f6565b7f2f3e000000000000000000000000000000000000000000000000000000000000607e93909101928301525060800191905056fea264697066735822122062a3373d80bf07174fca242b34d0e797e79746ffc2d024aaec27f94b48639f1164736f6c63430008140033",
  "libraries": {
    "Utilities": "0x9a4DCF3Fd4174F8F170F9b31eAf16001529ae613"
  },
  "devdoc": {
    "author": "VisualizeValue",
    "kind": "dev",
    "methods": {
      "render180Loop(Symbol)": {
        "details": "Render two loop symbols, one rotated by 180 degrees."
      },
      "render360Loop(Symbol)": {
        "details": "Render four loop symbols to form a square."
      },
      "render90Loop(Symbol)": {
        "details": "Render two loop symbols, one rotated by 90 degrees."
      },
      "renderColor(Color)": {
        "details": "Helper to render a color to its SVG compliant HSL string."
      },
      "renderDefs()": {
        "details": "Render SVG meta defenitions."
      },
      "renderGrid()": {
        "details": "Generate the SVG code for the entire 8x8 grid."
      },
      "renderGridRow()": {
        "details": "Generate the SVG code for rows in the 8x8 grid."
      },
      "renderInfinityCheck(Symbol)": {
        "details": "Quadruple check: Render an infinity check."
      },
      "renderInfinityPair(Symbol)": {
        "details": "Double check: Render an infinity pair."
      },
      "renderInfinitySingle(Symbol)": {
        "details": "Check: Render a single infinity."
      },
      "renderLoop(Symbol)": {
        "details": "Render a single loop symbol."
      },
      "renderNoise(Token)": {
        "details": "Render the noise layer."
      },
      "renderSVG(Token)": {
        "details": "Generate the SVG code for an Infinity token."
      },
      "renderStyle(Token)": {
        "details": "Render CSS variables."
      },
      "renderSymbol(Symbol)": {
        "details": "Generate SVG code for the symbols."
      },
      "renderSymbols(Token)": {
        "details": "Generate SVG code for the symbols."
      },
      "str(uint256)": {
        "details": "Uint to string helper."
      }
    },
    "title": "InfiniteArt",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Renders the Infinity visuals.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
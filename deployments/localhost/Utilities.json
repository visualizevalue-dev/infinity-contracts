{
  "address": "0x9a4DCF3Fd4174F8F170F9b31eAf16001529ae613",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "one",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "two",
          "type": "uint8"
        }
      ],
      "name": "avg",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "day",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "one",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "two",
          "type": "uint8"
        }
      ],
      "name": "max",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "one",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "two",
          "type": "uint8"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "one",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "two",
          "type": "uint8"
        }
      ],
      "name": "minGt0",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "salt",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "uint2str",
      "outputs": [
        {
          "internalType": "string",
          "name": "_uintAsString",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "c3f378ba41e05b92972639af2d777060",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"one\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"two\",\"type\":\"uint8\"}],\"name\":\"avg\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"day\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"one\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"two\",\"type\":\"uint8\"}],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"one\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"two\",\"type\":\"uint8\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"one\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"two\",\"type\":\"uint8\"}],\"name\":\"minGt0\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"salt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"uint2str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_uintAsString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"avg(uint8,uint8)\":{\"details\":\"Get the average between two numbers\"},\"day(uint256,uint256)\":{\"details\":\"Get the days since another date (input is seconds)\"},\"max(uint8,uint8)\":{\"details\":\"Get the larger number\"},\"min(uint8,uint8)\":{\"details\":\"Get the smaller number\"},\"minGt0(uint8,uint8)\":{\"details\":\"Get the smallest non zero number\"},\"random(uint256,string,uint256)\":{\"details\":\"Zero-index based salted pseudorandom number based on two inputs and max bound\"},\"random(uint256,uint256)\":{\"details\":\"Zero-index based pseudorandom number based on one input and max bound\"},\"uint2str(uint256)\":{\"details\":\"Convert an integer to a string\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Utilities.sol\":\"Utilities\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/libraries/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Utilities {\\n    /// @dev Zero-index based pseudorandom number based on one input and max bound\\n    function random(uint256 input, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input))) % _max);\\n    }\\n\\n    /// @dev Zero-index based salted pseudorandom number based on two inputs and max bound\\n    function random(uint256 input, string memory salt, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input, salt))) % _max);\\n    }\\n\\n    /// @dev Convert an integer to a string\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @dev Get the smallest non zero number\\n    function minGt0(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two\\n            ? two > 0\\n                ? two\\n                : one\\n            : one;\\n    }\\n\\n    /// @dev Get the smaller number\\n    function min(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one < two ? one : two;\\n    }\\n\\n    /// @dev Get the larger number\\n    function max(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two ? one : two;\\n    }\\n\\n    /// @dev Get the average between two numbers\\n    function avg(uint8 one, uint8 two) public pure returns (uint8 result) {\\n        unchecked {\\n            result = (one >> 1) + (two >> 1) + (one & two & 1);\\n        }\\n    }\\n\\n    /// @dev Get the days since another date (input is seconds)\\n    function day(uint256 from, uint256 to) public pure returns (uint24) {\\n        return uint24((to - from) / 24 hours + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x529f3946295d83e9961a487a953572220c07f1ab38c53619a5342a3bca957b42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6106a4610035600b8282823980515f1a60731461002957634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610090575f3560e01c8063a9dd122511610063578063a9dd122514610121578063d83f75b514610142578063dbde2f1914610155578063f76f950e14610168575f80fd5b8063420e2c3f1461009457806363d64159146100be57806377823c98146100d1578063a7b9112e146100f8575b5f80fd5b6100a76100a23660046103ec565b610188565b60405160ff90911681526020015b60405180910390f35b6100a76100cc3660046103ec565b6101b7565b6100e46100df36600461041d565b6101d2565b60405162ffffff90911681526020016100b5565b6100a76101063660046103ec565b600182811c607f90811683831c919091160192909116160190565b61013461012f36600461041d565b6101f6565b6040519081526020016100b5565b610134610150366004610451565b61022d565b6100a76101633660046103ec565b61026c565b61017b61017636600461050e565b610280565b6040516100b59190610547565b5f8160ff168360ff161161019c57826101ae565b5f8260ff16116101ac57826101ae565b815b90505b92915050565b5f8160ff168360ff16116101cb57816101ae565b5090919050565b5f620151806101e1848461058d565b6101eb91906105b4565b6101ae9060016105c7565b5f818360405160200161020b91815260200190565b604051602081830303815290604052805190602001205f1c6101ae91906105da565b5f8184846040516020016102429291906105ed565b604051602081830303815290604052805190602001205f1c61026491906105da565b949350505050565b5f8160ff168360ff16106101cb57816101ae565b6060815f036102c257505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b815f5b81156102e8576102d481610612565b90506102e1600a836105b4565b91506102c5565b5f8167ffffffffffffffff8111156103025761030261043d565b6040519080825280601f01601f19166020018201604052801561032c576020820181803683370190505b509050815b85156103ce5761034260018261058d565b90505f610350600a886105b4565b61035b90600a61062a565b610365908861058d565b610370906030610641565b90505f8160f81b90508084848151811061038c5761038c61065a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053506103c5600a896105b4565b97505050610331565b50949350505050565b803560ff811681146103e7575f80fd5b919050565b5f80604083850312156103fd575f80fd5b610406836103d7565b9150610414602084016103d7565b90509250929050565b5f806040838503121561042e575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610463575f80fd5b83359250602084013567ffffffffffffffff80821115610481575f80fd5b818601915086601f830112610494575f80fd5b8135818111156104a6576104a661043d565b604051601f8201601f19908116603f011681019083821181831017156104ce576104ce61043d565b816040528281528960208487010111156104e6575f80fd5b826020860160208301375f602084830101528096505050505050604084013590509250925092565b5f6020828403121561051e575f80fd5b5035919050565b5f5b8381101561053f578181015183820152602001610527565b50505f910152565b602081525f8251806020840152610565816040850160208701610525565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156101b1576101b1610579565b634e487b7160e01b5f52601260045260245ffd5b5f826105c2576105c26105a0565b500490565b808201808211156101b1576101b1610579565b5f826105e8576105e86105a0565b500690565b8281525f8251610604816020850160208701610525565b919091016020019392505050565b5f6001820161062357610623610579565b5060010190565b80820281158282048414176101b1576101b1610579565b60ff81811683821601908111156101b1576101b1610579565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212205ea734247bc75913087cc21649c8b6654df23ff46d0d8eeedaedcf7a6f4010da64736f6c63430008140033",
  "deployedBytecode": "0x7300000000000000000000000000000000000000003014608060405260043610610090575f3560e01c8063a9dd122511610063578063a9dd122514610121578063d83f75b514610142578063dbde2f1914610155578063f76f950e14610168575f80fd5b8063420e2c3f1461009457806363d64159146100be57806377823c98146100d1578063a7b9112e146100f8575b5f80fd5b6100a76100a23660046103ec565b610188565b60405160ff90911681526020015b60405180910390f35b6100a76100cc3660046103ec565b6101b7565b6100e46100df36600461041d565b6101d2565b60405162ffffff90911681526020016100b5565b6100a76101063660046103ec565b600182811c607f90811683831c919091160192909116160190565b61013461012f36600461041d565b6101f6565b6040519081526020016100b5565b610134610150366004610451565b61022d565b6100a76101633660046103ec565b61026c565b61017b61017636600461050e565b610280565b6040516100b59190610547565b5f8160ff168360ff161161019c57826101ae565b5f8260ff16116101ac57826101ae565b815b90505b92915050565b5f8160ff168360ff16116101cb57816101ae565b5090919050565b5f620151806101e1848461058d565b6101eb91906105b4565b6101ae9060016105c7565b5f818360405160200161020b91815260200190565b604051602081830303815290604052805190602001205f1c6101ae91906105da565b5f8184846040516020016102429291906105ed565b604051602081830303815290604052805190602001205f1c61026491906105da565b949350505050565b5f8160ff168360ff16106101cb57816101ae565b6060815f036102c257505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b815f5b81156102e8576102d481610612565b90506102e1600a836105b4565b91506102c5565b5f8167ffffffffffffffff8111156103025761030261043d565b6040519080825280601f01601f19166020018201604052801561032c576020820181803683370190505b509050815b85156103ce5761034260018261058d565b90505f610350600a886105b4565b61035b90600a61062a565b610365908861058d565b610370906030610641565b90505f8160f81b90508084848151811061038c5761038c61065a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053506103c5600a896105b4565b97505050610331565b50949350505050565b803560ff811681146103e7575f80fd5b919050565b5f80604083850312156103fd575f80fd5b610406836103d7565b9150610414602084016103d7565b90509250929050565b5f806040838503121561042e575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610463575f80fd5b83359250602084013567ffffffffffffffff80821115610481575f80fd5b818601915086601f830112610494575f80fd5b8135818111156104a6576104a661043d565b604051601f8201601f19908116603f011681019083821181831017156104ce576104ce61043d565b816040528281528960208487010111156104e6575f80fd5b826020860160208301375f602084830101528096505050505050604084013590509250925092565b5f6020828403121561051e575f80fd5b5035919050565b5f5b8381101561053f578181015183820152602001610527565b50505f910152565b602081525f8251806020840152610565816040850160208701610525565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156101b1576101b1610579565b634e487b7160e01b5f52601260045260245ffd5b5f826105c2576105c26105a0565b500490565b808201808211156101b1576101b1610579565b5f826105e8576105e86105a0565b500690565b8281525f8251610604816020850160208701610525565b919091016020019392505050565b5f6001820161062357610623610579565b5060010190565b80820281158282048414176101b1576101b1610579565b60ff81811683821601908111156101b1576101b1610579565b634e487b7160e01b5f52603260045260245ffdfea26469706673582212205ea734247bc75913087cc21649c8b6654df23ff46d0d8eeedaedcf7a6f4010da64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "avg(uint8,uint8)": {
        "details": "Get the average between two numbers"
      },
      "day(uint256,uint256)": {
        "details": "Get the days since another date (input is seconds)"
      },
      "max(uint8,uint8)": {
        "details": "Get the larger number"
      },
      "min(uint8,uint8)": {
        "details": "Get the smaller number"
      },
      "minGt0(uint8,uint8)": {
        "details": "Get the smallest non zero number"
      },
      "random(uint256,string,uint256)": {
        "details": "Zero-index based salted pseudorandom number based on two inputs and max bound"
      },
      "random(uint256,uint256)": {
        "details": "Zero-index based pseudorandom number based on one input and max bound"
      },
      "uint2str(uint256)": {
        "details": "Convert an integer to a string"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}